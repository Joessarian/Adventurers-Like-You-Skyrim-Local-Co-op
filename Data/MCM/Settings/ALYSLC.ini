; !!!IMPORTANT!!!
; Do not change the section/setting names below.
; Only modify the value assigned after the equals sign for each setting if you wish to make changes.

;==================
;==================
; [Global Options]
;==================
;==================
[Camera]
; Adjust the camera pitch depending on the current walkable terrain's pitch,
; and adjust the camera yaw to better follow the collective heading direction of all players.
bAutoRotateCamPitch = 1
bAutoRotateCamYaw = 1

; Experimental. Do not use if you suffer from motion sickness, as the camera
; will jump through obstacles regularly to keep as many players in frame as possible.
; The camera may also catch on a surface and stutter or cause the screen to flicker.
; Use if you can't stand seeing the skybox/void outside the traversable worldspace.
bCamCollisions = 1

; Fade objects that are blocking the visibility of players.
bFadeObstructions = 1

; Fade larger statics that can be cast to a FadeNode, like large rocks, houses, trees, and walls.
; Note: will remove the faded object's shadows entirely and can cause flickering at times.
bFadeLargerObstructions = 0

; Experimental. 
; If a player selects another player with their crosshair and presses the 'CamLockOn' bind, 
; focus the camera on the target player until the 'CamLockOn' bind is pressed again by any player.
; Useful for when the camera is stuck in a bad spot
; or for assisting straggling players in finding other players
; without resorting to teleportation.
bFocalPlayerMode = 0

; Use interpolation to smooth the camera's origin point path (the path the point equidistant to all players takes).
; Highly recommend keeping this setting enabled.
bOriginPointSmoothing = 1

; Only fade objects that are within a certain distance of the camera.
bProximityFadeOnly = 0

; IMPORTANT: Disabling all occlusion markers in an exterior/interior cell, whether through the CK or at runtime,
; will lead to worse performance, as more objects must be rendered each frame. 
; Only enable if you have the FPS headroom, want to have max visibility, and don't mind the jank of seeing the "void" outside the 
; walkable exterior/interior terrain.
bRemoveExteriorOcclusion = 0
bRemoveInteriorOcclusion = 0

; Use interpolation to smooth the camera's target point path.
; Highly recommend keeping this setting enabled.
bTargetPosSmoothing = 1

; (FPS Hit On Increase) FOV to set for the camera when it is in an exterior location.
; [0.0, 180.0]
fCamExteriorFOV = 75.0
; (FPS Hit On Increase) FOV to set for the camera when it is in an interior location.
; [0.0, 180.0]
fCamInteriorFOV = 75.0

; Camera lock on mode assistance type:
; [Full] (WIP): Auto zoom, rotate, and position the camera to keep all players and the lock on target on screen.
; Zoom, position, and rotation controls are disabled.
; [Rotation] (WIP): Auto rotate the camera to track the lock on target and zoom out to keep all players in view as much as possible. 
; Can still zoom in/out and change the camera's positional offset.
; [Zoom Only]: auto zoom out the camera to keep the players and lock on target on screen. 
; Can still rotate the camera normally.
; 0 for full, 
; 1 for rotation,
; 2 for zoom in/out only.
uLockOnAssistance = 1

[Cheats]
; Add all perks that have corresponding animation events, such as shield charge and silent roll.
bAddAnimEventSkillPerks = 0

; Infinite carryweight for all players once co-op starts.
bInfiniteCarryweight = 0

; TODO: Speed up supported dodge animations. Makes dodging more responsive but lowers dodge distance.
bSpeedUpDodgeAnimations = 0

; Speed up equip/unequip animations. Makes sheathing/drawing and cycling through gear faster.
bSpeedUpEquipAnimations = 0
	
[EmoteIdles]
; Cyclable emote idle animation event names.
sEmoteIdle1 = IdleApplaud2
sEmoteIdle2 = IdleApplaud3
sEmoteIdle3 = IdleApplaud4
sEmoteIdle4 = IdleApplaudSarcastic
sEmoteIdle5 = IdleSilentBow
sEmoteIdle6 = IdleCivilWarCheer
sEmoteIdle7 = IdleUncontrollableCough
sEmoteIdle8 = IdleCowering
sEmoteIdle9 = IdleCiceroDance1
sEmoteIdle10 = IdleCiceroDance2
sEmoteIdle11 = IdleCiceroDance3
sEmoteIdle12 = idleDrinkingStandingStart
sEmoteIdle13 = idleEatingStandingStart
sEmoteIdle14 = IdleFluteStart
sEmoteIdle15 = IdleGetAttention
sEmoteIdle16 = IdleCiceroHappy
sEmoteIdle17 = IdleHandsBehindBack
sEmoteIdle18 = pa_HugA
sEmoteIdle19 = IdleBlowHornImperial
sEmoteIdle20 = IdleLaugh
sEmoteIdle21 = IdleLuteStart
sEmoteIdle22 = IdlePointClose
sEmoteIdle23 = IdlePointFar_01
sEmoteIdle24 = IdlePointFar_02
sEmoteIdle25 = IdlePray
sEmoteIdle26 = IdleSalute
sEmoteIdle27 = IdleBlowHornStormcloak
sEmoteIdle28 = IdleWarmArms
sEmoteIdle29 = IdleWarmHands
sEmoteIdle30 = IdleWarmHandsCrouched
sEmoteIdle31 = IdleWave
sEmoteIdle32 = IdleWipeBrow

[ExtraMechanics]
; [Arms Rotation]
; Rotate arms when holding the appropriate binds while weapons are sheathed. 
; Reset your arms and torso with the 'Reset Aim' bind. 
; Power slap everyone. Definitely not feature creep.
bEnableArmsRotation = 1

; Slap an attacking/blocking/casting NPC to stop them cold in their tracks.
bSlapsStopAttacksAndBlocking = 1

; Multiplier for force applied by arm collisions.
; [0.0, 10.0]
fArmCollisionForceMultiplier = 1.0

; Condition that must hold to knock down a slapped NPC. 
; 0: Never knockdown a hit NPC. 
; 1: Only knock down an NPC if hitting them in the head at a sufficient speed. 
; 2: Only knockdown an NPC if hitting them anywhere at a sufficient speed.
uSlapKnockdownCriteria = 2

; [Flopping]
; Enable flopping. Double tap the 'Special Actions' bind while weapons are sheathed 
; to do damage through feature creep.
bEnableFlopping = 1

; Aim pitch affects flop trajectory. Check it out.
bAimPitchAffectsFlopTrajectory = 1

; [Object Manipulation]
; Enable 'telekinetic' object manipulation. 
; Allows the player to grab, move, rotate, drop, throw, and toggle collisions for movable objects, 
; including NPCs (if the 'Grab NPCs' option is enabled). 
; Interactions galore!
bEnableObjectManipulation = 1

; Attract nearby clutter while holding grab and not targeting any object with the crosshair.
bAutoGrabNearbyLootableObjectsOnHold = 1

; Can players grab NPCs (not other players)?
bCanGrabActors = 0

; Can players grab other players?
bCanGrabOtherPlayers = 1

; Grabbing projectiles costs magicka. 
; If enabled, hold the 'Grab Object' bind to grab any incoming projectiles. 
; Otherwise, to snag the projectile, the player must release the bind 
; when the projectile is about to collide with them.
bGrabIncomingProjectilesOnHold = 0

; Can continue grabbbing actors indefinitely if enabled.
bRemoveGrabbedActorAutoGetUp = 0

; (FPS Hit When Off) Only one collision raycast per thrown/dropped object per frame if enabled. 
; Otherwise, a more precise check is performed with one collision raycast per collidable node per frame.
bSimpleThrownObjectCollisionCheck = 0

; (WIP): Can be buggy. 
; If enabled, players can toggle collisions on/off for all grabbed objects
; when targeting a grabbed object with their crosshair and pressing the 'Special Action' bind.
bToggleGrabbedRefrCollisions = 0

; Base maximum release speed for thrown objects 
; ('Grab Object' bind held for more than the interval given by the 'Max Throw Speed Hold Time' setting) 
; before magicka leveling is factored in. Release speed increases as the player levels up their magicka.
; [0.0, 50000.0]
fBaseMaxThrownObjectReleaseSpeed = 1500.0

; Gives the max number of frames from the player at which incoming projectiles are considered grabbable, 
; meaning fast-moving projectiles can be intercepted further from the player, 
; but slower projectiles must be caught closer to the player. 
; This frame window will decrease as the player loses magicka, 
; so snagging incoming projectiles becomes a lot harder.
; [0.0, 30.0]
fFrameWindowToGrabIncomingProjectiles = 4.0

; Gives the number of seconds before auto-grabbing the next object while holding the 'Grab Object' bind.
; [0.0, 5.0]
fSecsBeforeAutoGrabbingNextLootableObject = 0.25

; Seconds to hold the 'Grab Object' bind in order to throw all grabbed objects at max speed.
; [0.01, 5.0]
fSecsToReleaseObjectsAtMaxSpeed = 0.5

; Max number of objects grabbable at once.
; Additional grabbed objects are suspended in a ring around the first grabbed object,
; hence 1 is added to a number that divides 360 without a remainder.
; [0, 101]
uMaxGrabbedReferences = 41

[MenusAndUI]
; Lockpicking is a team effort when enabled.
; The lock-activating companion player rotates the pick, and P1 rotates the lock.
bTwoPlayerLockpicking = 0

; Closest player to the speaker gets control of the dialogue menu if no player triggered the conversation.
bUninitializedDialogueWithClosestPlayer = 1

; Player distance (in-game units) to dialogue target at which to automatically exit dialogue.
; [100.0, 2000.0]
fAutoEndDialogueRadius = 500.0

; Camera lock on indicator side length (pixels).
; [1.0, 200.0]
fCamLockOnIndicatorLength = 15.0

; Camera lock on indicator side thickness (pixels).
; [1.0, 20.0]
fCamLockOnIndicatorThickness = 3.0

; Maximum amount of pixels the crosshair can move across per second.
; Used to scale player crosshair sensitivities.
; Set to your monitor's default resolution width as a baseline.
; [160.0, 7680.0]
fCrosshairMaxTraversablePixelsPerSec = 1920.0

; Player menu control overlay (colored border) outline thickness (pixels).
; [1.0, 50.0]
fPlayerMenuControlOverlayOutlineThickness = 12.0

[Movement]
; Movement/rotation multipliers.
; Global rotation multiplier which multiplies this player's movement types' rotation rates.
; [0.25, 4.0]
fBaseRotationMult = 1.0

; Base speedmult value, which is then modified by the player's height (inversely proportional).
; Game's default speedmult is 100.
; Players are much faster with the modified movement types'
; increased rotation speeds, so the base speed is set lower by default to compensate.
; [0, 300.0]
fBaseSpeed = 85.0

; Bashing rotation multiplier.
; [0.1, 10.0]
fBashingRotMult = 0.5

; Blocking rotation multiplier.
; [0.1, 10.0]
fBlockingRotMult = 1.0

; Speedmult multiplier while casting spells.
; [0.1, 10.0]
fCastingMovMult = 0.75

; Casting rotation multiplier.
; [0.1, 10.0]
fCastingRotMult = 0.75

; Jump rotation multiplier.
; [0.1, 10.0]
fJumpingRotMult = 0.3

; Additional jump launch speed to apply on top of the player's movement speed
; on the first frame of the jump.
; In game units / second.
; [0, 5000.0]
fJumpAdditionalLaunchSpeed = 0.0

; Gravity multiplier that affects how fast the player rises to the apex and falls during the descent of a jump.
; Lower the value for a floatier jump. Raise the value for a faster ascent and descent.
; [0.1, 10.0]
fJumpingGravityMult = 2.0

; Maximum support surface slope angle from which a player can start jumping.
; Set to 90 degrees to jump off any support surface without restriction.
; See that mountain? You can climb it. Or maybe not.
; [0, 90.0]
fJumpingMaxSlopeAngle = 90.0

; Speedmult multiplier while attacking with a melee weapon.
; [0.1, 10.0]
fMeleeAttackMovMult = 1.0

; Rotation multiplier while attacking with a melee weapon.
; [0.1, 10.0]
fMeleeAttackRotMult = 0.5

; Speedmult multiplier while attacking with a ranged weapon.
; [0.1, 10.0]
fRangedAttackMovMult = 1.0

; Rotation multiplier while attacking with a ranged weapon.
; [0.1, 10.0]
fRangedAttackRotMult = 0.5

; Mounted rotation multiplier.
; [0.1, 10.0]
fRidingRotMult = 0.2

; Sneak rotation multiplier.
; [0.1, 10.0]
fSneakRotMult = 1.0

; Speedmult multiplier when sprinting.
; [0.1, 10.0]
fSprintingMovMult = 1.5

; Rotation multiplier while sprinting.
; [0.1, 1.0]
fSprintingRotMult = 0.67

; Seconds before reverting gravity and playing the fall animation for a jumping player. 
; Directly influences jump height.
; Increase to jump higher.
; [0.01, 2.0]
fSecsAfterGatherToFall = 0.07

[NewSystems]
; Can perform killmove executions on other players.
bCanKillmoveOtherPlayers = 0

; Enable reviving of player 1. 
; Will NOT be compatible with any mods that change the death system for player 1, 
; so keep disabled if you have any of those mods.
bCanRevivePlayer1 = 1

; Hold a cycling bind to cycle through equipable items/item categories.
; Emote idles are cycled on hold by default.
bHoldToCycle = 0

; (WIP) Enable a quick, velocity-based dodge with I-frames, which will override any installed dodge mods and also trigger 
; in a greater variety of situations (such as when the player's weapons are sheathed). 
; Dodge distance depends on the left stick's displacement. 
; Dodge cost depends on both the left stick's displacement and the player's equipped weight.
bUseDashDodgeSystem = 1

; Perform killmoves using this mod's system. Companion players cannot perform killmoves and P1 rarely performs them without enabling this setting.
bUseKillmovesSystem = 1

; Players are downed when reaching 0 health and remain in a pseudo-death state
; until revived by another player through health transfer 
; or until the pre-determined revive window elapses (entire party is wiped).
bUseReviveSystem = 1

; Use unarmed killmoves when casting spells at nearby low-health enemies.
; Add a mean streak to your mage's close quarters combat when enabled.
bUseUnarmedKillmovesForSpellcasting = 0

; Killmove chance per attack when target's health is below the killmove health threshold (fKillmoveHealthFraction).
; [0, 1.0]
fKillmoveChance = 0.33

; Max health fraction below which killmoves can trigger.
; [0, 1.0]
fKillmoveHealthFraction = 0.1

; The maximum speedmult to set while the player is in the middle of dash dodging. 
; Decreasing/increasing this value also decreases/increases the dodge's distance.
; [1.0, 1200.0]
fMaxDashDodgeSpeedmult = 600.0

; The minimum speedmult that is set at the start and end of the dash dodge. 
; Decreasing/increasing this value also decreases/increases the dodge's 'snappiness' and distance. 
; [1.0, 1200.0]
fMinDashDodgeSpeedmult = 300.0

; Start cycling through nearby references after holding the activate bind for this many seconds.
; [0, 3.0]
fSecsBeforeActivationCycling = 1.0

; Seconds between activation checks (time between choosing and highlighting new objects once cycling starts).
; [0.1, 3.0]
fSecsBetweenActivationChecks = 0.7

; Default button held time threshold for triggering on-hold player actions, such as power attacks in the default game.
; [0.1, 1.0]
fSecsDefMinHoldTime = 0.2

; Seconds between cycling favorited items/emote idles while holding a cycling bind.
; [0.1, 3.0]
fSecsCyclingInterval = 0.8

; Seconds to fully revive a targeted player when they are downed, if uninterrupted.
; [1.0, 60.0]
fSecsReviveTime = 5.0

; Seconds until an unrevived player, and all other active players, die.
; Game over once this interval elapses.
; [1.0, 300.0]
fSecsUntilDownedDeath = 30.0

; Automatically equip weapon-matching highest count/damage ammo when the player
; equips a ranged weapon and has no ammo or mismatching ammo equipped.
; 0 for no auto-equip.
; 1 for highest count.
; 2 for highest damage.
uAmmoAutoEquipMode = 1

; The number of frames the dash dodge lasts at 60 FPS (a frame is 1/60th of a second at 60 FPS). 
; NOTE: This is also the number of I-frames for the dodge, since the player is invulnerable throughout the duration of the dodge. 
; Decreasing/increasing the frame count also decreases/increases the distance of the dodge because the player spends less/more time at their max speedmult if the dodge lasts shorter/longer.
; The dodge also always has an additional 6 startup frames.
; [0, 54]
uDashDodgeBaseAnimFrameCount = 24

[Progression]
; Add auto-scaling to co-op player's own skill progression when setting skill actor values on level up.
; Gives co-op players class-dependent extra levels to skills on level up.
bStackCoopPlayerSkillAVAutoScaling = 0

; [Enderal-specific settings]
; Please note that the options below will in no way balance progression completely
; for multiple players and can easily be exploited should players desire to do so.
; Nonetheless, the options are offered to present players with tools to individualize their progression
; in the absence of separate leveling per player.
; For this reason, it is highly recommended to spread leveling points evenly among active players 
; and elect for a varied party composition.

; Scale crafting/learning/memory points with the number of active players.
; Meaning that each time P1 would normally gain one of these points, 
; they instead gain points equal to the number of active players.
; Left to the players' discretions to (not) abuse this as they see fit.
; Reading crafting/learning books will only level up the player reading the books.
bScaleCraftingPointsWithNumPlayers = 1
bScaleLearningPointsWithNumPlayers = 1

; Please note that perks are still shared among all players.
bScaleMemoryPointsWithNumPlayers = 1

; When a skillbook is looted, add a random skillbook of the same tier to other active players.
bEveryoneGetsALootedEnderalSkillbook = 1

; Additional gold multiplier per active player.
; Set to 1 to scale directly with the number of active players, or 0 for no additional gold at all.
; Exists because Enderal skill progression is partially dependent on buying crafting/learning books.
; [0, 10.0]
fAdditionalGoldPerPlayerMult = 0.0

; [Skyrim-specific settings]
; Multiplier for the XP required to level up.
; Lower the value to level up faster.
; [0.1, 4.0]
fLevelUpXPThresholdMult = 1.0
; Perk points gained per level up. Defaults to 1, as in the vanilla game, and can be fractional.
; This number is multiplied by the player's current level - 1 and then rounded down to get the total number of perk points available for use. 
; For example, 1.5 means 3 perk points every two levels, given out as 1 on an even levels and 2 on odd levels. 
; IMPORTANT: Changing this value more than once per playthrough may bug perk counts.
; [0.0, 10.0]
fPerkPointsPerLevelUp = 1.0
; One-time, flat increase to the perk points total, so not given out per level. 
; For example, a value of 3 means all players will receive 3 extra perk points the next time they access the perk tree. 
; IMPORTANT: Changing this value more than once per playthrough may bug perk counts.
; [0, 255]
uFlatPerkPointsIncrease = 0

;============================
;============================
; [Player-specific settings]
;============================
;============================

; PLEASE READ IF UNSURE OF HOW TO DEFINE BINDS:
;
; {Important limitations}:
; 1. The perform type ('OnPress'/'OnPressAndRelease'/'OnHold'/'OnRelease'/'OnConsecTap'/'NoAction') is not modifiable for any action because
; it is either an intrinsic property of the action (ie. CastLH/CastRH are done on hold because some spells require casting on hold) or
; linked directly to the functions called to perform the action itself (ie. Cycling binds are performed on hold since the player might 
; have the 'bHoldToCycle' setting set and cannot be performed on release). 
; This may change in the future.
; 2. 'OnHold'/'OnPress'/'OnPressAndRelease'/'OnConsecTap' actions cannot be stacked seamlessly, 
; since some of the action's functionality will be performed once the required inputs are pressed 1 or more times. 
; Try to assign multiple inputs to these actions to maximize stack-ability.
;
; {Notes}:
; 1. Four inputs/actions are assignable to an action's composing inputs list.
; 2. Assign 'None' (0) to indicate that there is no input/action for a bind slot.
; Disable an action entirely by setting the 'b<ActionName>1' setting to 0.
; 3. A composition option can consist of either inputs or other actions, 
; which must themselves collapse down to a composition consisting of only inputs. 
; For example, if 'QuickSlotCast' is bound to LB/L1 + RB/R1 + 'SpecialAction', and 'SpecialAction' is bound to X/Square, 
; 'QuickSlotCast' will trigger when LB/L1 + RB/R1 + X/Square are held.

; {Tips}:
; 1. Multi-input actions that trigger 'OnRelease' can be performed more efficiently by pressing all the required inputs
; and releasing only the last input in the composing inputs/actions list. For example, for the default CycleWeaponRH bind, 
; which has composing inputs RB/R1 + X/Square, keep holding RB/R1 and press X/Square to cycle weapons in the right hand once.
; 2. If you'd like to stack binds on top of one another, prioritize binding 'OnRelease' actions to fewer inputs.
; For example, having 'FaceTarget' bound to LB/L1 and 'GrabObject' bound to LB/L1 + A/X will not trigger the 'FaceTarget' action 
; since it will only be performed if LB/L1 is released on its own. 
; However, once A/X is also pressed, 'FaceTarget' will be blocked from being performed, 
; leaving 'GrabObject' to trigger on release of LB/L1 or A/X.
; 3. Some actions, such as MoveCrosshair, RotateCam, and ZoomCam, require use of the right stick,
; but also need a preceding differentiating input press, which is by default a bumper (LB/L1, RB/R1) button.
; LB/L1 and RB/R1 should be reserved for on-release actions that have inconsequential 
; or easily reversible effects when triggered. Hence, by default, LB/L1 is bound
; to the FaceTarget action and RB/R1 is used as the power attack modifier, and not bound directly to an action on its own.
; Keep this in mind when constructing your binds.
;
; [Player Actions Enumeration]
; These are the input/action indices to assign to the 'uAction<ActionName><#>' settings.

; None = 0,
; DPadU = 1,
; DPadD = 2,
; DPadL = 3,
; DPadR = 4,
; Start/Options = 5,
; Back/Share = 6,
; LThumb/L3 = 7,
; RThumb/R3 = 8,
; LShoulder/L1 = 9,
; RShoulder/R1 = 10,
; A/X = 11,
; B/Circle = 12,
; X/Square = 13,
; Y/Triangle = 14,
; LT/L2 = 15,
; RT/R2 = 16,

; LS = 17,
; RS = 18,

; Activate = 19,
; ActivateAllOfType = 20,
; ActivateCancel = 21,
; AdjustAimPitch = 22,
; AttackLH = 23,
; AttackRH = 24,
; Bash = 25,
; Block = 26,
; CamLockOn = 27,
; CamManualPos = 28,
; CastLH = 29,
; CastRH = 30,
; ChangeDialoguePlayer = 31,
; CoopDebugMenu = 32,
; CoopIdlesMenu = 33,
; CoopMiniGamesMenu = 34,
; CoopSummoningMenu = 35,
; CycleAmmo = 36,
; CycleSpellCategoryLH = 37,
; CycleSpellCategoryRH = 38,
; CycleSpellLH = 39,
; CycleSpellRH = 40,
; CycleVoiceSlotMagic = 41,
; CycleWeaponCategoryLH = 42,
; CycleWeaponCategoryRH = 43,
; CycleWeaponLH = 44,
; CycleWeaponRH = 45,
; DebugRagdollPlayer = 46,
; DebugReEquipHandForms = 47,
; DebugRefreshPlayerManagers = 48,
; DebugResetPlayer = 49,
; DisableCoopCam = 50,
; Dismount = 51,
; Dodge = 52,
; FaceTarget = 53,
; Favorites = 54,
; GrabObject = 55,
; GrabRotateYZ = 56,
; HotkeyEquip = 57,
; Inventory = 58,
; Jump = 59,
; MagicMenu = 60,
; MapMenu = 61,
; MoveCrosshair = 62,
; Pause = 63,
; PowerAttackDual = 64,
; PowerAttackLH = 65,
; PowerAttackRH = 66,
; QuickSlotCast = 67,
; QuickSlotItem = 68,
; ResetAim = 69,
; RotateCam = 70,
; RotateLeftForearm = 71,
; RotateLeftHand = 72,
; RotateLeftShoulder = 73,
; RotateRightForearm = 74,
; RotateRightHand = 75,
; RotateRightShoulder = 76,
; Sheathe = 77,
; Shout = 78,
; Sneak = 79,
; SpecialAction = 80,
; Sprint = 81,
; StatsMenu = 82,
; TeleportToPlayer = 83,
; TradeWithPlayer = 84,
; TweenMenu = 85,
; WaitMenu = 86,
; ZoomCam = 87
;
; Totals:
; 16 buttons, 18 inputs, 69 actions.

; [Notes on Binds]
; Actions that must include the right stick as the last input in the bind:
; - AdjustAimPitch,
; - GrabRotateYZ,
; - HotkeyEquip,
; - MoveCrosshair,
; - RotateCam,
; - RotateLeftForearm,
; - RotateLeftHand,
; - RotateLeftShoulder,
; - RotateRightForearm,
; - RotateRightHand,
; - RotateRightShoulder,
; - ZoomCam

; {Perform types}:
; NOTE: Not directly customizable, but listed in this file to indicate when the bind's associated action will trigger.
; 1. 'Disabled': Never performed, composing inputs open to reassignment.
; 2. 'OnConsecTap': Performed when the last input (composing input order matters) 
; or any composing input (any order) is pressed twice in quick succession.
; 3. 'OnHold': Performed while all composing inputs are pressed and held, cleaned up on release of at least one of the bind's inputs.
; 4. 'OnPress': Performed when all composing inputs are first pressed.
; 5. 'OnPressAndRelease': Performed when all composing inputs are first pressed and when at least one input is released.
; 6. 'OnRelease': Action is performed when some or all of its composing inputs are released.
; 7. 'NoAction': No action performed directly by the player action functions holder. 
; Could be handled by another player manager or serve purely as a flag to indicate the action succeeded.
;
; {Flags (supported actions)}:
; 1. Consec Tap (only for'OnRelease' actions): triggers the action if the last/at least one composing input is pressed twice in quick succession.
; 2. Min Hold Time (only for'OnRelease' actions): composing inputs must be held for a certain amount of time before the action triggers. 
; NOTE: The action will occur 'OnPress' once the bind is held long enough, instead of 'OnRelease'.
; 3. Any order (for all perform types): the composing inputs can be pressed in any order to trigger the action.

; Flag for each action's composing input/action ('bAction<ActionName><#>' must be set to 1
; before assigning input action id codes ('uAction<ActionName><#>').
; If set to 0, whatever id code assigned will be ignored.

; General form:
; bActionAnyInputOrder = 0
; bActionConsecTap = 0
; bActionMinHoldTime = 0
; bAction1 = 1 (1 to enable the bind, 0 to disable)
; uAction1 = 0
; bAction2 = 0
; uAction2 = 0
; bAction3 = 0
; uAction3 = 0
; bAction4 = 0
; uAction4 = 0

[Player1]
; [Stat Modifiers]
; Multipliers applied to a co-op actor's health, magicka, and stamina cost/regen values.
; [0.0, 100.0]
fHealthRegenMult = 1.0
fMagickaCostMult = 1.0
fMagickaRegenMult = 1.0
fStaminaCostMult = 1.0
fStaminaRegenMult = 1.0

; Ratio of health/magicka/stamina regen rate in combat to health/magicka/stamina regen rate out of combat.
; [0.0, 1.0]
fHealthRegenCombatRatio = 0.70
fMagickaRegenCombatRatio = 0.33
fStaminaRegenCombatRatio = 0.35

; [Damage Modifiers]
; Multiplier applied to this player's dealt damage.
; Applies to most sources of damage, especially direct sources such as melee attacks or non-explosive hits.
; [0.0, 100.0]
fDamageDealtMult = 1.0

; Multiplier applied to this player's received damage.
; Applies to most sources of damage, especially direct sources such as melee attacks or non-explosive hits.
; [0.0, 100.0]
fDamageReceivedMult = 1.0

; Flop damage mult. For no reason at all.
; [0.0, 100.0]
fFlopDamageMult = 1.0

; Multiplier to the damage dealt to any NPCs that were knocked down by a slap.
; [0.0, 100.0]
fSlapKnockdownDamageMult = 1.0

; Damage mult for thrown objects.
; [0.0, 100.0]
fThrownObjectDamageMult = 1.0

; [Controller]
; Proportion of full displacement from center to serve as the analog stick deadzone.
; [0.01, 0.99]
fAnalogDeadzoneRatio = 0.25

; Proportion of full trigger activation to serve as the trigger deadzone.
; [0.01, 0.99]
fTriggerDeadzoneRatio = 0.25

; [Progression]
; Skill XP multiplier applied whenever this player receives XP for using a skill.
; [0, 10.0]
fSkillXPMult = 1.0

; [Targeting]
; Can players select other players with their crosshairs?
bCanTargetOtherPlayers = 1

; Crosshair magnetism: crosshair slows down when over a target.
; Use crosshair magnetism for Actors.
bCrosshairMagnetismForActors = 1

; Use crosshair magnetism for Object References (all other selectable objects).
bCrosshairMagnetismForObjRefs = 1

; If enabled, attacking party-friendly actors 
; (followers, player allies, summons, and other players) 
; will do damage as usual and reward XP to the attacking player.
; Otherwise, any damage done is negated and no XP is awarded.
; NOTE: For player 1, if disabled, only the damage dealt to friendly actors is negated.
; No other changes were made to the default friendly fire behavior for player 1.
bFriendlyFire = 0

; When no object is selected by the crosshair and the player is attacking,
; aim correction will automatically target an NPC within the player's field-of-view window.
; If the player is attacking nearby hostile NPCs, aim correction will target an NPC 
; that is hostile to a player or ally. Otherwise, if the player is casting a targeted healing spell, 
; aim correction will target other players and allies.
bUseAimCorrection = 1

; If enabled, screenspace (2D) positions and directions are used to select an aim correction target; 
; otherwise worldspace (3D) positions and directions are used. 
; For screenspace checks, imagine an arrow connecting the player's torso to an NPC's torso on the screen
; and move the left stick along that arrow to select the target. 
; For worldspace checks, the player should move towards the target NPC's world position to select them.
bScreenspaceBasedAimCorrectionCheck = 0

; Angular window (degrees) centered at the player's current left stick/heading angle
; within which any actors will be considered as targets for attack auto-aim adjustment.
; Only used when the player is not targeting an actor with their crosshair.
; [0, 360.0]
fAimCorrectionFOV = 90.0

; Max angular adjustment speed (degrees per second) when adjusting the player's aim pitch.
; [0, 720.0]
fMaxAimPitchAdjustmentRate = 180.000000

; 0: Homing projectiles that follow the crosshair.
; 1: Experimental. Projectiles move to the predicted target intercept position.
; Note for aim prediction: tends to be pretty inaccurate when targets change direction quickly
; or when shooting a lobbed projectile.
uProjectileTrajectoryType = 1

; [UI]
; Animated crosshair (animated rotation and oscillation about center).
bAnimatedCrosshair = 1

; 0: Use generic four-prongs style.
; 1: Use Skyrim-style crosshair.
bSkyrimStyleCrosshair = 1

; Fade inactive crosshair when not targeting an object, not moving the crosshair, and not in 'face target' mode.
bFadeInactiveCrosshair = 1

; Re-center inactive crosshair when not targeting an object, not moving the crosshair, and not in 'face target' mode.
bRecenterInactiveCrosshair = 1

; Show an arrow indicator when adjusting or resetting the player's aim pitch 
; or when moving grabbed objects closer to/farther from the player.
bEnableAimPitchIndicator = 1

; Show the expected trajectory for any charged spells, drawn arrows/bolts, 
; and grabbed objects that are about to be thrown.
bEnablePredictedProjectileTrajectoryCurves = 1

; Thickness of any predicted projectile trajectory curves (pixels).
; [1.0, 10.0]
fPredictedProjectileTrajectoryCurveThickness = 2.0

; Crosshair gap radius (pixels).
; [0, 100.0]
fCrosshairGapRadius = 4.0

; Crosshair length (pixels).
; [0, 100.0]
fCrosshairLength = 12.0

; Crosshair thickness (pixels).
; [0, 25.0]
fCrosshairThickness = 2.0

; Crosshair horizontal movement sensitivities for each player.
; Fraction of max pixels per second (fCrosshairMaxTraversablePixelsPerSec).
; For example, a value of '0.5' means the crosshair will move
; across a distance equal to half the max pixels traversable per second.
; [0, 1.0]
fCrosshairHorizontalSensitivity = 0.5

; Crosshair vertical movement sensitivities for each player.
; Fraction of max pixels per second (fCrosshairMaxTraversablePixelsPerSec).
; For example, a value of '0.5' means the crosshair will move
; across a distance equal to half the max pixels traversable per second.
; [0, 1.0]
fCrosshairVerticalSensitivity = 0.5

; Player indicator side length (pixels).
; [1.0, 100.0]
fPlayerIndicatorLength = 30.0

; Player indicator side thickness (pixels).
; [1.0, 10.0]
fPlayerIndicatorThickness = 5.0

; Overlay and crosshair colors (RRGGBB) in hex.
sOverlayRGBValue = FF0000

; Inner outline is always drawn.
; Black by default.
sCrosshairInnerOutlineRGB = 000000

; Outer outline is only drawn when the crosshair is highlighting a valid target.
; White by default.
sCrosshairOuterOutlineRGB = FFFFFF

; Alpha ranges from 0 (0x0) to 255 (0xFF)
; and determines the transparency of UI elements.
; [0, 255]
uOverlayAlpha = 255

; [0, 255]
uCrosshairInnerOutlineAlpha = 255

; [0, 255]
uCrosshairOuterOutlineAlpha = 255

; 0: Never show the player indicator.
; 1: Only show when the player is obscured or below a certain pixel height on the screen.
; 2: Show the player indicator at all times.
uPlayerIndicatorVisibilityType = 1

; [Timer Intervals]
; Minimum number of seconds to move across and through a crosshair target at max right stick displacement. 
; Serves as a 'stickiness' factor, meaning increasing the interval keeps the crosshair 
; stuck on the target for longer when moving through it.
; [0.0, 2.0]
fMinSecsCrosshairTargetTraversal = 0.2

; Seconds before fading/re-centering the crosshair when it is not over a target, not in 'Face Target' mode, 
; and not being moved at all by the player.
; [0.5, 10.0]
fSecsBeforeRemovingInactiveCrosshair = 2.0

; Seconds to oscillate an animated crosshair (if enabled) from fully contracted to fully expanded.
; [0.1, 10.0]
fSecsToOscillateCrosshair = 1.5

; Seconds to rotate an animated crosshair (if enabled) from its default '+' orientation to its 'x' ('Face Target') configuration or vice versa.
; [0.1, 5.0]
fSecsToRotateCrosshair = 0.5

; [Binds]
; Activate (OnHold)
bActionActivateAnyInputOrder = 0
bActionActivateMinHoldTime = 0
bActionActivate1 = 1
uActionActivate1 = 11
bActionActivate2 = 0
uActionActivate2 = 0
bActionActivate3 = 0
uActionActivate3 = 0
bActionActivate4 = 0
uActionActivate4 = 0

; ActivateAllOfType (OnRelease)
bActionActivateAllOfTypeAnyInputOrder = 0
bActionActivateAllOfTypeConsecTap = 0
bActionActivateAllOfTypeMinHoldTime = 0
bActionActivateAllOfType1 = 1
uActionActivateAllOfType1 = 19
bActionActivateAllOfType2 = 1
uActionActivateAllOfType2 = 9
bActionActivateAllOfType3 = 0
uActionActivateAllOfType3 = 0
bActionActivateAllOfType4 = 0
uActionActivateAllOfType4 = 0

; ActivateCancel (OnRelease)
bActionActivateCancelAnyInputOrder = 0
bActionActivateCancelConsecTap = 0
bActionActivateCancelMinHoldTime = 0
bActionActivateCancel1 = 1
uActionActivateCancel1 = 19
bActionActivateCancel2 = 1
uActionActivateCancel2 = 10
bActionActivateCancel3 = 0
uActionActivateCancel3 = 0
bActionActivateCancel4 = 0
uActionActivateCancel4 = 0

; AdjustAimPitch (OnPressAndRelease)
bActionAdjustAimPitchAnyInputOrder = 1
bActionAdjustAimPitchMinHoldTime = 0
bActionAdjustAimPitch1 = 1
uActionAdjustAimPitch1 = 9
bActionAdjustAimPitch2 = 1
uActionAdjustAimPitch2 = 10
bActionAdjustAimPitch3 = 1
uActionAdjustAimPitch3 = 18
bActionAdjustAimPitch4 = 0
uActionAdjustAimPitch4 = 0

; AttackLH (OnHold)
bActionAttackLHAnyInputOrder = 0
bActionAttackLHMinHoldTime = 0
bActionAttackLH1 = 1
uActionAttackLH1 = 15
bActionAttackLH2 = 0
uActionAttackLH2 = 0
bActionAttackLH3 = 0
uActionAttackLH3 = 0
bActionAttackLH4 = 0
uActionAttackLH4 = 0

; AttackRH (OnHold)
bActionAttackRHAnyInputOrder = 0
bActionAttackRHMinHoldTime = 0
bActionAttackRH1 = 1
uActionAttackRH1 = 16
bActionAttackRH2 = 0
uActionAttackRH2 = 0
bActionAttackRH3 = 0
uActionAttackRH3 = 0
bActionAttackRH4 = 0
uActionAttackRH4 = 0

; Bash (OnHold)
bActionBashAnyInputOrder = 0
bActionBashMinHoldTime = 0
bActionBash1 = 1
uActionBash1 = 24
bActionBash2 = 0
uActionBash2 = 0
bActionBash3 = 0
uActionBash3 = 0
bActionBash4 = 0
uActionBash4 = 0

; Block (OnPressAndRelease)
bActionBlockAnyInputOrder = 0
bActionBlockMinHoldTime = 0
bActionBlock1 = 1
uActionBlock1 = 23
bActionBlock2 = 0
uActionBlock2 = 0
bActionBlock3 = 0
uActionBlock3 = 0
bActionBlock4 = 0
uActionBlock4 = 0

; CamLockOn (OnRelease)
bActionCamLockOnAnyInputOrder = 0
bActionCamLockOnConsecTap = 0
bActionCamLockOnMinHoldTime = 0
bActionCamLockOn1 = 1
uActionCamLockOn1 = 9
bActionCamLockOn2 = 1
uActionCamLockOn2 = 8
bActionCamLockOn3 = 0
uActionCamLockOn3 = 0
bActionCamLockOn4 = 0
uActionCamLockOn4 = 0

; CamManualPos (OnRelease)
bActionCamManualPosAnyInputOrder = 0
bActionCamManualPosConsecTap = 0
bActionCamManualPosMinHoldTime = 0
bActionCamManualPos1 = 1
uActionCamManualPos1 = 10
bActionCamManualPos2 = 1
uActionCamManualPos2 = 8
bActionCamManualPos3 = 0
uActionCamManualPos3 = 0
bActionCamManualPos4 = 0
uActionCamManualPos4 = 0

; CastLH (OnHold)
bActionCastLHAnyInputOrder = 0
bActionCastLHMinHoldTime = 0
bActionCastLH1 = 1
uActionCastLH1 = 23
bActionCastLH2 = 0
uActionCastLH2 = 0
bActionCastLH3 = 0
uActionCastLH3 = 0
bActionCastLH4 = 0
uActionCastLH4 = 0

; CastRH (OnHold)
bActionCastRHAnyInputOrder = 0
bActionCastRHMinHoldTime = 0
bActionCastRH1 = 1
uActionCastRH1 = 24
bActionCastRH2 = 0
uActionCastRH2 = 0
bActionCastRH3 = 0
uActionCastRH3 = 0
bActionCastRH4 = 0
uActionCastRH4 = 0

; ChangeDialoguePlayer (OnRelease)
bActionChangeDialoguePlayerAnyInputOrder = 0
bActionChangeDialoguePlayerConsecTap = 0
bActionChangeDialoguePlayerMinHoldTime = 0
bActionChangeDialoguePlayer1 = 1
uActionChangeDialoguePlayer1 = 63
bActionChangeDialoguePlayer2 = 0
uActionChangeDialoguePlayer2 = 0
bActionChangeDialoguePlayer3 = 0
uActionChangeDialoguePlayer3 = 0
bActionChangeDialoguePlayer4 = 0
uActionChangeDialoguePlayer4 = 0

; CoopDebugMenu (OnRelease)
bActionCoopDebugMenuAnyInputOrder = 0
bActionCoopDebugMenuConsecTap = 0
bActionCoopDebugMenuMinHoldTime = 0
bActionCoopDebugMenu1 = 1
uActionCoopDebugMenu1 = 5
bActionCoopDebugMenu2 = 1
uActionCoopDebugMenu2 = 6
bActionCoopDebugMenu3 = 0
uActionCoopDebugMenu3 = 0
bActionCoopDebugMenu4 = 0
uActionCoopDebugMenu4 = 0

; CoopIdlesMenu (OnRelease)
bActionCoopIdlesMenuAnyInputOrder = 0
bActionCoopIdlesMenuConsecTap = 0
bActionCoopIdlesMenuMinHoldTime = 0
bActionCoopIdlesMenu1 = 1
uActionCoopIdlesMenu1 = 10
bActionCoopIdlesMenu2 = 1
uActionCoopIdlesMenu2 = 4
bActionCoopIdlesMenu3 = 0
uActionCoopIdlesMenu3 = 0
bActionCoopIdlesMenu4 = 0
uActionCoopIdlesMenu4 = 0

; CoopMiniGamesMenu (OnRelease)
bActionCoopMiniGamesMenuAnyInputOrder = 0
bActionCoopMiniGamesMenuConsecTap = 0
bActionCoopMiniGamesMenuMinHoldTime = 0
bActionCoopMiniGamesMenu1 = 1
uActionCoopMiniGamesMenu1 = 10
bActionCoopMiniGamesMenu2 = 1
uActionCoopMiniGamesMenu2 = 3
bActionCoopMiniGamesMenu3 = 0
uActionCoopMiniGamesMenu3 = 0
bActionCoopMiniGamesMenu4 = 0
uActionCoopMiniGamesMenu4 = 0

; CoopSummoningMenu (OnRelease)
bActionCoopSummoningMenuAnyInputOrder = 0
bActionCoopSummoningMenuConsecTap = 0
bActionCoopSummoningMenuMinHoldTime = 0
bActionCoopSummoningMenu1 = 1
uActionCoopSummoningMenu1 = 6
bActionCoopSummoningMenu2 = 1
uActionCoopSummoningMenu2 = 5
bActionCoopSummoningMenu3 = 0
uActionCoopSummoningMenu3 = 0
bActionCoopSummoningMenu4 = 0
uActionCoopSummoningMenu4 = 0

; CycleAmmo (OnHold)
bActionCycleAmmoAnyInputOrder = 0
bActionCycleAmmoMinHoldTime = 0
bActionCycleAmmo1 = 1
uActionCycleAmmo1 = 9
bActionCycleAmmo2 = 1
uActionCycleAmmo2 = 14
bActionCycleAmmo3 = 0
uActionCycleAmmo3 = 0
bActionCycleAmmo4 = 0
uActionCycleAmmo4 = 0

; CycleSpellCategoryLH (OnHold)
bActionCycleSpellCategoryLHAnyInputOrder = 0
bActionCycleSpellCategoryLHMinHoldTime = 0
bActionCycleSpellCategoryLH1 = 1
uActionCycleSpellCategoryLH1 = 14
bActionCycleSpellCategoryLH2 = 1
uActionCycleSpellCategoryLH2 = 9
bActionCycleSpellCategoryLH3 = 0
uActionCycleSpellCategoryLH3 = 0
bActionCycleSpellCategoryLH4 = 0
uActionCycleSpellCategoryLH4 = 0

; CycleSpellCategoryRH (OnHold)
bActionCycleSpellCategoryRHAnyInputOrder = 0
bActionCycleSpellCategoryRHMinHoldTime = 0
bActionCycleSpellCategoryRH1 = 1
uActionCycleSpellCategoryRH1 = 14
bActionCycleSpellCategoryRH2 = 1
uActionCycleSpellCategoryRH2 = 10
bActionCycleSpellCategoryRH3 = 0
uActionCycleSpellCategoryRH3 = 0
bActionCycleSpellCategoryRH4 = 0
uActionCycleSpellCategoryRH4 = 0

; CycleSpellLH (OnHold)
bActionCycleSpellLHAnyInputOrder = 0
bActionCycleSpellLHMinHoldTime = 0
bActionCycleSpellLH1 = 1
uActionCycleSpellLH1 = 9
bActionCycleSpellLH2 = 1
uActionCycleSpellLH2 = 13
bActionCycleSpellLH3 = 0
uActionCycleSpellLH3 = 0
bActionCycleSpellLH4 = 0
uActionCycleSpellLH4 = 0

; CycleSpellRH (OnHold)
bActionCycleSpellRHAnyInputOrder = 0
bActionCycleSpellRHMinHoldTime = 0
bActionCycleSpellRH1 = 1
uActionCycleSpellRH1 = 10
bActionCycleSpellRH2 = 1
uActionCycleSpellRH2 = 13
bActionCycleSpellRH3 = 0
uActionCycleSpellRH3 = 0
bActionCycleSpellRH4 = 0
uActionCycleSpellRH4 = 0

; CycleVoiceSlotMagic (OnHold)
bActionCycleVoiceSlotMagicAnyInputOrder = 0
bActionCycleVoiceSlotMagicMinHoldTime = 0
bActionCycleVoiceSlotMagic1 = 1
uActionCycleVoiceSlotMagic1 = 10
bActionCycleVoiceSlotMagic2 = 1
uActionCycleVoiceSlotMagic2 = 14
bActionCycleVoiceSlotMagic3 = 0
uActionCycleVoiceSlotMagic3 = 0
bActionCycleVoiceSlotMagic4 = 0
uActionCycleVoiceSlotMagic4 = 0

; CycleWeaponCategoryLH (OnHold)
bActionCycleWeaponCategoryLHAnyInputOrder = 0
bActionCycleWeaponCategoryLHMinHoldTime = 0
bActionCycleWeaponCategoryLH1 = 1
uActionCycleWeaponCategoryLH1 = 14
bActionCycleWeaponCategoryLH2 = 1
uActionCycleWeaponCategoryLH2 = 15
bActionCycleWeaponCategoryLH3 = 0
uActionCycleWeaponCategoryLH3 = 0
bActionCycleWeaponCategoryLH4 = 0
uActionCycleWeaponCategoryLH4 = 0

; CycleWeaponCategoryRH (OnHold)
bActionCycleWeaponCategoryRHAnyInputOrder = 0
bActionCycleWeaponCategoryRHMinHoldTime = 0
bActionCycleWeaponCategoryRH1 = 1
uActionCycleWeaponCategoryRH1 = 14
bActionCycleWeaponCategoryRH2 = 1
uActionCycleWeaponCategoryRH2 = 16
bActionCycleWeaponCategoryRH3 = 0
uActionCycleWeaponCategoryRH3 = 0
bActionCycleWeaponCategoryRH4 = 0
uActionCycleWeaponCategoryRH4 = 0

; CycleWeaponLH (OnHold)
bActionCycleWeaponLHAnyInputOrder = 0
bActionCycleWeaponLHMinHoldTime = 0
bActionCycleWeaponLH1 = 1
uActionCycleWeaponLH1 = 9
bActionCycleWeaponLH2 = 1
uActionCycleWeaponLH2 = 12
bActionCycleWeaponLH3 = 0
uActionCycleWeaponLH3 = 0
bActionCycleWeaponLH4 = 0
uActionCycleWeaponLH4 = 0

; CycleWeaponRH (OnHold)
bActionCycleWeaponRHAnyInputOrder = 0
bActionCycleWeaponRHMinHoldTime = 0
bActionCycleWeaponRH1 = 1
uActionCycleWeaponRH1 = 10
bActionCycleWeaponRH2 = 1
uActionCycleWeaponRH2 = 12
bActionCycleWeaponRH3 = 0
uActionCycleWeaponRH3 = 0
bActionCycleWeaponRH4 = 0
uActionCycleWeaponRH4 = 0

; DebugRagdollPlayer (OnRelease)
bActionDebugRagdollPlayerAnyInputOrder = 0
bActionDebugRagdollPlayerConsecTap = 0
bActionDebugRagdollPlayerMinHoldTime = 0
bActionDebugRagdollPlayer1 = 1
uActionDebugRagdollPlayer1 = 9
bActionDebugRagdollPlayer2 = 1
uActionDebugRagdollPlayer2 = 4
bActionDebugRagdollPlayer3 = 0
uActionDebugRagdollPlayer3 = 0
bActionDebugRagdollPlayer4 = 0
uActionDebugRagdollPlayer4 = 0

; DebugReEquipHandForms (OnRelease)
bActionDebugReEquipHandFormsAnyInputOrder = 0
bActionDebugReEquipHandFormsConsecTap = 0
bActionDebugReEquipHandFormsMinHoldTime = 0
bActionDebugReEquipHandForms1 = 1
uActionDebugReEquipHandForms1 = 9
bActionDebugReEquipHandForms2 = 1
uActionDebugReEquipHandForms2 = 3
bActionDebugReEquipHandForms3 = 0
uActionDebugReEquipHandForms3 = 0
bActionDebugReEquipHandForms4 = 0
uActionDebugReEquipHandForms4 = 0

; DebugRefreshPlayerManagers (OnRelease)
bActionDebugRefreshPlayerManagersAnyInputOrder = 0
bActionDebugRefreshPlayerManagersConsecTap = 0
bActionDebugRefreshPlayerManagersMinHoldTime = 0
bActionDebugRefreshPlayerManagers1 = 1
uActionDebugRefreshPlayerManagers1 = 9
bActionDebugRefreshPlayerManagers2 = 1
uActionDebugRefreshPlayerManagers2 = 2
bActionDebugRefreshPlayerManagers3 = 0
uActionDebugRefreshPlayerManagers3 = 0
bActionDebugRefreshPlayerManagers4 = 0
uActionDebugRefreshPlayerManagers4 = 0

; DebugResetPlayer (OnRelease)
bActionDebugResetPlayerAnyInputOrder = 0
bActionDebugResetPlayerConsecTap = 0
bActionDebugResetPlayerMinHoldTime = 0
bActionDebugResetPlayer1 = 1
uActionDebugResetPlayer1 = 9
bActionDebugResetPlayer2 = 1
uActionDebugResetPlayer2 = 1
bActionDebugResetPlayer3 = 0
uActionDebugResetPlayer3 = 0
bActionDebugResetPlayer4 = 0
uActionDebugResetPlayer4 = 0

; DisableCoopCam (OnRelease)
bActionDisableCoopCamAnyInputOrder = 1
bActionDisableCoopCamConsecTap = 0
bActionDisableCoopCamMinHoldTime = 0
bActionDisableCoopCam1 = 1
uActionDisableCoopCam1 = 7
bActionDisableCoopCam2 = 1
uActionDisableCoopCam2 = 8
bActionDisableCoopCam3 = 0
uActionDisableCoopCam3 = 0
bActionDisableCoopCam4 = 0
uActionDisableCoopCam4 = 0

; Dismount (OnRelease)
bActionDismountAnyInputOrder = 0
bActionDismountConsecTap = 0
bActionDismountMinHoldTime = 0
bActionDismount1 = 1
uActionDismount1 = 79
bActionDismount2 = 0
uActionDismount2 = 0
bActionDismount3 = 0
uActionDismount3 = 0
bActionDismount4 = 0
uActionDismount4 = 0

; Dodge (OnRelease)
bActionDodgeAnyInputOrder = 0
bActionDodgeConsecTap = 0
bActionDodgeMinHoldTime = 0
bActionDodge1 = 1
uActionDodge1 = 81
bActionDodge2 = 0
uActionDodge2 = 0
bActionDodge3 = 0
uActionDodge3 = 0
bActionDodge4 = 0
uActionDodge4 = 0

; FaceTarget (OnRelease)
bActionFaceTargetAnyInputOrder = 0
bActionFaceTargetConsecTap = 0
bActionFaceTargetMinHoldTime = 0
bActionFaceTarget1 = 1
uActionFaceTarget1 = 9
bActionFaceTarget2 = 0
uActionFaceTarget2 = 0
bActionFaceTarget3 = 0
uActionFaceTarget3 = 0
bActionFaceTarget4 = 0
uActionFaceTarget4 = 0

; Favorites (OnRelease)
bActionFavoritesAnyInputOrder = 0
bActionFavoritesConsecTap = 0
bActionFavoritesMinHoldTime = 0
bActionFavorites1 = 1
uActionFavorites1 = 6
bActionFavorites2 = 0
uActionFavorites2 = 0
bActionFavorites3 = 0
uActionFavorites3 = 0
bActionFavorites4 = 0
uActionFavorites4 = 0

; GrabObject (OnHold)
bActionGrabObjectAnyInputOrder = 0
bActionGrabObjectMinHoldTime = 0
bActionGrabObject1 = 1
uActionGrabObject1 = 53
bActionGrabObject2 = 1
uActionGrabObject2 = 19
bActionGrabObject3 = 0
uActionGrabObject3 = 0
bActionGrabObject4 = 0
uActionGrabObject4 = 0

; GrabRotateYZ (NoAction)
bActionGrabRotateYZAnyInputOrder = 1
bActionGrabRotateYZMinHoldTime = 0
bActionGrabRotateYZ1 = 1
uActionGrabRotateYZ1 = 53
bActionGrabRotateYZ2 = 1
uActionGrabRotateYZ2 = 8
bActionGrabRotateYZ3 = 1
uActionGrabRotateYZ3 = 18
bActionGrabRotateYZ4 = 0
uActionGrabRotateYZ4 = 0

; HotkeyEquip (OnHold)
bActionHotkeyEquipAnyInputOrder = 1
bActionHotkeyEquipMinHoldTime = 0
bActionHotkeyEquip1 = 1
uActionHotkeyEquip1 = 8
bActionHotkeyEquip2 = 1
uActionHotkeyEquip2 = 18
bActionHotkeyEquip3 = 0
uActionHotkeyEquip3 = 0
bActionHotkeyEquip4 = 0
uActionHotkeyEquip4 = 0

; Inventory (OnRelease)
bActionInventoryAnyInputOrder = 0
bActionInventoryConsecTap = 0
bActionInventoryMinHoldTime = 0
bActionInventory1 = 1
uActionInventory1 = 4
bActionInventory2 = 0
uActionInventory2 = 0
bActionInventory3 = 0
uActionInventory3 = 0
bActionInventory4 = 0
uActionInventory4 = 0

; Jump (OnRelease)
bActionJumpAnyInputOrder = 0
bActionJumpConsecTap = 0
bActionJumpMinHoldTime = 0
bActionJump1 = 1
uActionJump1 = 14
bActionJump2 = 0
uActionJump2 = 0
bActionJump3 = 0
uActionJump3 = 0
bActionJump4 = 0
uActionJump4 = 0

; MagicMenu (OnRelease)
bActionMagicMenuAnyInputOrder = 0
bActionMagicMenuConsecTap = 0
bActionMagicMenuMinHoldTime = 0
bActionMagicMenu1 = 1
uActionMagicMenu1 = 3
bActionMagicMenu2 = 0
uActionMagicMenu2 = 0
bActionMagicMenu3 = 0
uActionMagicMenu3 = 0
bActionMagicMenu4 = 0
uActionMagicMenu4 = 0

; MapMenu (OnRelease)
bActionMapMenuAnyInputOrder = 0
bActionMapMenuConsecTap = 0
bActionMapMenuMinHoldTime = 0
bActionMapMenu1 = 1
uActionMapMenu1 = 2
bActionMapMenu2 = 0
uActionMapMenu2 = 0
bActionMapMenu3 = 0
uActionMapMenu3 = 0
bActionMapMenu4 = 0
uActionMapMenu4 = 0

; MoveCrosshair (NoAction)
bActionMoveCrosshairAnyInputOrder = 0
bActionMoveCrosshairMinHoldTime = 0
bActionMoveCrosshair1 = 1
uActionMoveCrosshair1 = 18
bActionMoveCrosshair2 = 0
uActionMoveCrosshair2 = 0
bActionMoveCrosshair3 = 0
uActionMoveCrosshair3 = 0
bActionMoveCrosshair4 = 0
uActionMoveCrosshair4 = 0

; Pause (OnRelease)
bActionPauseAnyInputOrder = 0
bActionPauseConsecTap = 0
bActionPauseMinHoldTime = 0
bActionPause1 = 1
uActionPause1 = 5
bActionPause2 = 0
uActionPause2 = 0
bActionPause3 = 0
uActionPause3 = 0
bActionPause4 = 0
uActionPause4 = 0

; PowerAttackDual (OnRelease)
bActionPowerAttackDualAnyInputOrder = 1
bActionPowerAttackDualConsecTap = 0
bActionPowerAttackDualMinHoldTime = 0
bActionPowerAttackDual1 = 1
uActionPowerAttackDual1 = 10
bActionPowerAttackDual2 = 1
uActionPowerAttackDual2 = 24
bActionPowerAttackDual3 = 1
uActionPowerAttackDual3 = 23
bActionPowerAttackDual4 = 0
uActionPowerAttackDual4 = 0

; PowerAttackLH (OnRelease)
bActionPowerAttackLHAnyInputOrder = 0
bActionPowerAttackLHConsecTap = 0
bActionPowerAttackLHMinHoldTime = 0
bActionPowerAttackLH1 = 1
uActionPowerAttackLH1 = 10
bActionPowerAttackLH2 = 1
uActionPowerAttackLH2 = 23
bActionPowerAttackLH3 = 0
uActionPowerAttackLH3 = 0
bActionPowerAttackLH4 = 0
uActionPowerAttackLH4 = 0

; PowerAttackRH (OnRelease)
bActionPowerAttackRHAnyInputOrder = 0
bActionPowerAttackRHConsecTap = 0
bActionPowerAttackRHMinHoldTime = 0
bActionPowerAttackRH1 = 1
uActionPowerAttackRH1 = 10
bActionPowerAttackRH2 = 1
uActionPowerAttackRH2 = 24
bActionPowerAttackRH3 = 0
uActionPowerAttackRH3 = 0
bActionPowerAttackRH4 = 0
uActionPowerAttackRH4 = 0

; QuickSlotCast (OnHold)
bActionQuickSlotCastAnyInputOrder = 0
bActionQuickSlotCastMinHoldTime = 0
bActionQuickSlotCast1 = 1
uActionQuickSlotCast1 = 9
bActionQuickSlotCast2 = 1
uActionQuickSlotCast2 = 10
bActionQuickSlotCast3 = 1
uActionQuickSlotCast3 = 80
bActionQuickSlotCast4 = 0
uActionQuickSlotCast4 = 0

; QuickSlotItem (OnRelease)
bActionQuickSlotItemAnyInputOrder = 0
bActionQuickSlotItemConsecTap = 0
bActionQuickSlotItemMinHoldTime = 0
bActionQuickSlotItem1 = 1
uActionQuickSlotItem1 = 10
bActionQuickSlotItem2 = 1
uActionQuickSlotItem2 = 9
bActionQuickSlotItem3 = 1
uActionQuickSlotItem3 = 80
bActionQuickSlotItem4 = 0
uActionQuickSlotItem4 = 0

; ResetAim (OnRelease)
bActionResetAimAnyInputOrder = 0
bActionResetAimConsecTap = 0
bActionResetAimMinHoldTime = 0
bActionResetAim1 = 1
uActionResetAim1 = 10
bActionResetAim2 = 0
uActionResetAim2 = 0
bActionResetAim3 = 0
uActionResetAim3 = 0
bActionResetAim4 = 0
uActionResetAim4 = 0

; RotateCam (OnPressAndRelease)
bActionRotateCamAnyInputOrder = 1
bActionRotateCamMinHoldTime = 0
bActionRotateCam1 = 1
uActionRotateCam1 = 10
bActionRotateCam2 = 1
uActionRotateCam2 = 18
bActionRotateCam3 = 0
uActionRotateCam3 = 0
bActionRotateCam4 = 0
uActionRotateCam4 = 0

; RotateLeftForearm (NoAction)
bActionRotateLeftForearmAnyInputOrder = 1
bActionRotateLeftForearmMinHoldTime = 0
bActionRotateLeftForearm1 = 1
uActionRotateLeftForearm1 = 9
bActionRotateLeftForearm2 = 1
uActionRotateLeftForearm2 = 23
bActionRotateLeftForearm3 = 1
uActionRotateLeftForearm3 = 18
bActionRotateLeftForearm4 = 0
uActionRotateLeftForearm4 = 0

; RotateLeftHand (NoAction)
bActionRotateLeftHandAnyInputOrder = 1
bActionRotateLeftHandMinHoldTime = 0
bActionRotateLeftHand1 = 1
uActionRotateLeftHand1 = 9
bActionRotateLeftHand2 = 1
uActionRotateLeftHand2 = 23
bActionRotateLeftHand3 = 1
uActionRotateLeftHand3 = 8
bActionRotateLeftHand4 = 1
uActionRotateLeftHand4 = 18

; RotateLeftShoulder (NoAction)
bActionRotateLeftShoulderAnyInputOrder = 1
bActionRotateLeftShoulderMinHoldTime = 0
bActionRotateLeftShoulder1 = 1
uActionRotateLeftShoulder1 = 23
bActionRotateLeftShoulder2 = 1
uActionRotateLeftShoulder2 = 18
bActionRotateLeftShoulder3 = 0
uActionRotateLeftShoulder3 = 0
bActionRotateLeftShoulder4 = 0
uActionRotateLeftShoulder4 = 0

; RotateRightForearm (NoAction)
bActionRotateRightForearmAnyInputOrder = 1
bActionRotateRightForearmMinHoldTime = 0
bActionRotateRightForearm1 = 1
uActionRotateRightForearm1 = 10
bActionRotateRightForearm2 = 1
uActionRotateRightForearm2 = 24
bActionRotateRightForearm3 = 1
uActionRotateRightForearm3 = 18
bActionRotateRightForearm4 = 0
uActionRotateRightForearm4 = 0

; RotateRightHand (NoAction)
bActionRotateRightHandAnyInputOrder = 1
bActionRotateRightHandMinHoldTime = 0
bActionRotateRightHand1 = 1
uActionRotateRightHand1 = 10
bActionRotateRightHand2 = 1
uActionRotateRightHand2 = 24
bActionRotateRightHand3 = 1
uActionRotateRightHand3 = 8
bActionRotateRightHand4 = 1
uActionRotateRightHand4 = 18

; RotateRightShoulder (NoAction)
bActionRotateRightShoulderAnyInputOrder = 1
bActionRotateRightShoulderMinHoldTime = 0
bActionRotateRightShoulder1 = 1
uActionRotateRightShoulder1 = 24
bActionRotateRightShoulder2 = 1
uActionRotateRightShoulder2 = 18
bActionRotateRightShoulder3 = 0
uActionRotateRightShoulder3 = 0
bActionRotateRightShoulder4 = 0
uActionRotateRightShoulder4 = 0

; Sheathe (OnRelease)
bActionSheatheAnyInputOrder = 0
bActionSheatheConsecTap = 0
bActionSheatheMinHoldTime = 0
bActionSheathe1 = 1
uActionSheathe1 = 8
bActionSheathe2 = 0
uActionSheathe2 = 0
bActionSheathe3 = 0
uActionSheathe3 = 0
bActionSheathe4 = 0
uActionSheathe4 = 0

; Shout (OnHold)
bActionShoutAnyInputOrder = 0
bActionShoutMinHoldTime = 0
bActionShout1 = 1
uActionShout1 = 10
bActionShout2 = 1
uActionShout2 = 11
bActionShout3 = 0
uActionShout3 = 0
bActionShout4 = 0
uActionShout4 = 0

; Sneak (OnRelease)
bActionSneakAnyInputOrder = 0
bActionSneakConsecTap = 0
bActionSneakMinHoldTime = 0
bActionSneak1 = 1
uActionSneak1 = 7
bActionSneak2 = 0
uActionSneak2 = 0
bActionSneak3 = 0
uActionSneak3 = 0
bActionSneak4 = 0
uActionSneak4 = 0

; SpecialAction (OnHold)
bActionSpecialActionAnyInputOrder = 0
bActionSpecialActionMinHoldTime = 0
bActionSpecialAction1 = 1
uActionSpecialAction1 = 13
bActionSpecialAction2 = 0
uActionSpecialAction2 = 0
bActionSpecialAction3 = 0
uActionSpecialAction3 = 0
bActionSpecialAction4 = 0
uActionSpecialAction4 = 0

; Sprint (OnPressAndRelease)
bActionSprintAnyInputOrder = 0
bActionSprintMinHoldTime = 1
bActionSprint1 = 1
uActionSprint1 = 12
bActionSprint2 = 0
uActionSprint2 = 0
bActionSprint3 = 0
uActionSprint3 = 0
bActionSprint4 = 0
uActionSprint4 = 0

; StatsMenu (OnRelease)
bActionStatsMenuAnyInputOrder = 0
bActionStatsMenuConsecTap = 0
bActionStatsMenuMinHoldTime = 0
bActionStatsMenu1 = 1
uActionStatsMenu1 = 1
bActionStatsMenu2 = 0
uActionStatsMenu2 = 0
bActionStatsMenu3 = 0
uActionStatsMenu3 = 0
bActionStatsMenu4 = 0
uActionStatsMenu4 = 0

; TeleportToPlayer (OnRelease)
bActionTeleportToPlayerAnyInputOrder = 0
bActionTeleportToPlayerConsecTap = 0
bActionTeleportToPlayerMinHoldTime = 0
bActionTeleportToPlayer1 = 1
uActionTeleportToPlayer1 = 10
bActionTeleportToPlayer2 = 1
uActionTeleportToPlayer2 = 1
bActionTeleportToPlayer3 = 0
uActionTeleportToPlayer3 = 0
bActionTeleportToPlayer4 = 0
uActionTeleportToPlayer4 = 0

; TradeWithPlayer (OnRelease)
bActionTradeWithPlayerAnyInputOrder = 0
bActionTradeWithPlayerConsecTap = 0
bActionTradeWithPlayerMinHoldTime = 0
bActionTradeWithPlayer1 = 1
uActionTradeWithPlayer1 = 10
bActionTradeWithPlayer2 = 1
uActionTradeWithPlayer2 = 2
bActionTradeWithPlayer3 = 0
uActionTradeWithPlayer3 = 0
bActionTradeWithPlayer4 = 0
uActionTradeWithPlayer4 = 0

; TweenMenu (OnRelease)
bActionTweenMenuAnyInputOrder = 0
bActionTweenMenuConsecTap = 0
bActionTweenMenuMinHoldTime = 0
bActionTweenMenu1 = 1
uActionTweenMenu1 = 10
bActionTweenMenu2 = 1
uActionTweenMenu2 = 5
bActionTweenMenu3 = 0
uActionTweenMenu3 = 0
bActionTweenMenu4 = 0
uActionTweenMenu4 = 0

; WaitMenu (OnRelease)
bActionWaitMenuAnyInputOrder = 0
bActionWaitMenuConsecTap = 0
bActionWaitMenuMinHoldTime = 0
bActionWaitMenu1 = 1
uActionWaitMenu1 = 9
bActionWaitMenu2 = 1
uActionWaitMenu2 = 6
bActionWaitMenu3 = 0
uActionWaitMenu3 = 0
bActionWaitMenu4 = 0
uActionWaitMenu4 = 0

; ZoomCam (OnPressAndRelease)
bActionZoomCamAnyInputOrder = 1
bActionZoomCamMinHoldTime = 0
bActionZoomCam1 = 1
uActionZoomCam1 = 9
bActionZoomCam2 = 1
uActionZoomCam2 = 18
bActionZoomCam3 = 0
uActionZoomCam3 = 0
bActionZoomCam4 = 0
uActionZoomCam4 = 0

[Player2]
; [Stat Modifiers]
; Multipliers applied to a co-op actor's health, magicka, and stamina cost/regen values.
; [0.0, 100.0]
fHealthRegenMult = 1.0
fMagickaCostMult = 1.0
fMagickaRegenMult = 1.0
fStaminaCostMult = 1.0
fStaminaRegenMult = 1.0

; Ratio of health/magicka/stamina regen rate in combat to health/magicka/stamina regen rate out of combat.
; [0.0, 1.0]
fHealthRegenCombatRatio = 0.70
fMagickaRegenCombatRatio = 0.33
fStaminaRegenCombatRatio = 0.35

; [Damage Modifiers]
; Multiplier applied to this player's dealt damage.
; Applies to most sources of damage, especially direct sources such as melee attacks or non-explosive hits.
; [0.0, 100.0]
fDamageDealtMult = 1.0

; Multiplier applied to this player's received damage.
; Applies to most sources of damage, especially direct sources such as melee attacks or non-explosive hits.
; [0.0, 100.0]
fDamageReceivedMult = 1.0

; Flop damage mult. For no reason at all.
; [0.0, 100.0]
fFlopDamageMult = 1.0

; Multiplier to the damage dealt to any NPCs that were knocked down by a slap.
; [0.0, 100.0]
fSlapKnockdownDamageMult = 1.0

; Damage mult for thrown objects.
; [0.0, 100.0]
fThrownObjectDamageMult = 1.0

; [Controller]
; Proportion of full displacement from center to serve as the analog stick deadzone.
; [0.01, 0.99]
fAnalogDeadzoneRatio = 0.25

; Proportion of full trigger activation to serve as the trigger deadzone.
; [0.01, 0.99]
fTriggerDeadzoneRatio = 0.25

; [Progression]
; Skill XP multiplier applied whenever this player receives XP for using a skill.
; [0, 10.0]
fSkillXPMult = 1.0

; [Targeting]
; Can players select other players with their crosshairs?
bCanTargetOtherPlayers = 1

; Crosshair magnetism: crosshair slows down when over a target.
; Use crosshair magnetism for Actors.
bCrosshairMagnetismForActors = 1

; Use crosshair magnetism for Object References (all other selectable objects).
bCrosshairMagnetismForObjRefs = 1

; If enabled, attacking party-friendly actors 
; (followers, player allies, summons, and other players) 
; will do damage as usual and reward XP to the attacking player.
; Otherwise, any damage done is negated and no XP is awarded.
; NOTE: For player 1, if disabled, only the damage dealt to friendly actors is negated.
; No other changes were made to the default friendly fire behavior for player 1.
bFriendlyFire = 0

; When no object is selected by the crosshair and the player is attacking,
; aim correction will automatically target an NPC within the player's field-of-view window.
; If the player is attacking nearby hostile NPCs, aim correction will target an NPC 
; that is hostile to a player or ally. Otherwise, if the player is casting a targeted healing spell, 
; aim correction will target other players and allies.
bUseAimCorrection = 1

; If enabled, screenspace (2D) positions and directions are used to select an aim correction target; 
; otherwise worldspace (3D) positions and directions are used. 
; For screenspace checks, imagine an arrow connecting the player's torso to an NPC's torso on the screen
; and move the left stick along that arrow to select the target. 
; For worldspace checks, the player should move towards the target NPC's world position to select them.
bScreenspaceBasedAimCorrectionCheck = 0

; Angular window (degrees) centered at the player's current left stick/heading angle
; within which any actors will be considered as targets for attack auto-aim adjustment.
; Only used when the player is not targeting an actor with their crosshair.
; [0, 360.0]
fAimCorrectionFOV = 90.0

; Max angular adjustment speed (degrees per second) when adjusting the player's aim pitch.
; [0, 720.0]
fMaxAimPitchAdjustmentRate = 180.000000

; 0: Homing projectiles that follow the crosshair.
; 1: Experimental. Projectiles move to the predicted target intercept position.
; Note for aim prediction: tends to be pretty inaccurate when targets change direction quickly
; or when shooting a lobbed projectile.
uProjectileTrajectoryType = 1

; [UI]
; Animated crosshair (animated rotation and oscillation about center).
bAnimatedCrosshair = 1

; 0: Use generic four-prongs style.
; 1: Use Skyrim-style crosshair.
bSkyrimStyleCrosshair = 1

; Fade inactive crosshair when not targeting an object, not moving the crosshair, and not in 'face target' mode.
bFadeInactiveCrosshair = 1

; Re-center inactive crosshair when not targeting an object, not moving the crosshair, and not in 'face target' mode.
bRecenterInactiveCrosshair = 1

; Show an arrow indicator when adjusting or resetting the player's aim pitch 
; or when moving grabbed objects closer to/farther from the player.
bEnableAimPitchIndicator = 1

; Show the expected trajectory for any charged spells, drawn arrows/bolts, 
; and grabbed objects that are about to be thrown.
bEnablePredictedProjectileTrajectoryCurves = 1

; Thickness of any predicted projectile trajectory curves (pixels).
; [1.0, 10.0]
fPredictedProjectileTrajectoryCurveThickness = 2.0

; Crosshair gap radius (pixels).
; [0, 100.0]
fCrosshairGapRadius = 4.0

; Crosshair length (pixels).
; [0, 100.0]
fCrosshairLength = 12.0

; Crosshair thickness (pixels).
; [0, 25.0]
fCrosshairThickness = 2.0

; Crosshair horizontal movement sensitivities for each player.
; Fraction of max pixels per second (fCrosshairMaxTraversablePixelsPerSec).
; For example, a value of '0.5' means the crosshair will move
; across a distance equal to half the max pixels traversable per second.
; [0, 1.0]
fCrosshairHorizontalSensitivity = 0.5

; Crosshair vertical movement sensitivities for each player.
; Fraction of max pixels per second (fCrosshairMaxTraversablePixelsPerSec).
; For example, a value of '0.5' means the crosshair will move
; across a distance equal to half the max pixels traversable per second.
; [0, 1.0]
fCrosshairVerticalSensitivity = 0.5

; Player indicator side length (pixels).
; [1.0, 100.0]
fPlayerIndicatorLength = 30.0

; Player indicator side thickness (pixels).
; [1.0, 10.0]
fPlayerIndicatorThickness = 5.0

; Overlay and crosshair colors (RRGGBB) in hex.
sOverlayRGBValue = 00FF00

; Inner outline is always drawn.
; Black by default.
sCrosshairInnerOutlineRGB = 000000

; Outer outline is only drawn when the crosshair is highlighting a valid target.
; White by default.
sCrosshairOuterOutlineRGB = FFFFFF

; Alpha ranges from 0 (0x0) to 255 (0xFF)
; and determines the transparency of UI elements.
; [0, 255]
uOverlayAlpha = 255

; [0, 255]
uCrosshairInnerOutlineAlpha = 255

; [0, 255]
uCrosshairOuterOutlineAlpha = 255

; 0: Never show the player indicator.
; 1: Only show when the player is obscured or below a certain pixel height on the screen.
; 2: Show the player indicator at all times.
uPlayerIndicatorVisibilityType = 1

; [Timer Intervals]
; Minimum number of seconds to move across and through a crosshair target at max right stick displacement. 
; Serves as a 'stickiness' factor, meaning increasing the interval keeps the crosshair 
; stuck on the target for longer when moving through it.
; [0.0, 2.0]
fMinSecsCrosshairTargetTraversal = 0.2

; Seconds before fading/re-centering the crosshair when it is not over a target, not in 'Face Target' mode, 
; and not being moved at all by the player.
; [0.5, 10.0]
fSecsBeforeRemovingInactiveCrosshair = 2.0

; Seconds to oscillate an animated crosshair (if enabled) from fully contracted to fully expanded.
; [0.1, 10.0]
fSecsToOscillateCrosshair = 1.5

; Seconds to rotate an animated crosshair (if enabled) from its default '+' orientation to its 'x' ('Face Target') configuration or vice versa.
; [0.1, 5.0]
fSecsToRotateCrosshair = 0.5

; [Binds]
; Activate (OnHold)
bActionActivateAnyInputOrder = 0
bActionActivateMinHoldTime = 0
bActionActivate1 = 1
uActionActivate1 = 11
bActionActivate2 = 0
uActionActivate2 = 0
bActionActivate3 = 0
uActionActivate3 = 0
bActionActivate4 = 0
uActionActivate4 = 0

; ActivateAllOfType (OnRelease)
bActionActivateAllOfTypeAnyInputOrder = 0
bActionActivateAllOfTypeConsecTap = 0
bActionActivateAllOfTypeMinHoldTime = 0
bActionActivateAllOfType1 = 1
uActionActivateAllOfType1 = 19
bActionActivateAllOfType2 = 1
uActionActivateAllOfType2 = 9
bActionActivateAllOfType3 = 0
uActionActivateAllOfType3 = 0
bActionActivateAllOfType4 = 0
uActionActivateAllOfType4 = 0

; ActivateCancel (OnRelease)
bActionActivateCancelAnyInputOrder = 0
bActionActivateCancelConsecTap = 0
bActionActivateCancelMinHoldTime = 0
bActionActivateCancel1 = 1
uActionActivateCancel1 = 19
bActionActivateCancel2 = 1
uActionActivateCancel2 = 10
bActionActivateCancel3 = 0
uActionActivateCancel3 = 0
bActionActivateCancel4 = 0
uActionActivateCancel4 = 0

; AdjustAimPitch (OnPressAndRelease)
bActionAdjustAimPitchAnyInputOrder = 1
bActionAdjustAimPitchMinHoldTime = 0
bActionAdjustAimPitch1 = 1
uActionAdjustAimPitch1 = 9
bActionAdjustAimPitch2 = 1
uActionAdjustAimPitch2 = 10
bActionAdjustAimPitch3 = 1
uActionAdjustAimPitch3 = 18
bActionAdjustAimPitch4 = 0
uActionAdjustAimPitch4 = 0

; AttackLH (OnHold)
bActionAttackLHAnyInputOrder = 0
bActionAttackLHMinHoldTime = 0
bActionAttackLH1 = 1
uActionAttackLH1 = 15
bActionAttackLH2 = 0
uActionAttackLH2 = 0
bActionAttackLH3 = 0
uActionAttackLH3 = 0
bActionAttackLH4 = 0
uActionAttackLH4 = 0

; AttackRH (OnHold)
bActionAttackRHAnyInputOrder = 0
bActionAttackRHMinHoldTime = 0
bActionAttackRH1 = 1
uActionAttackRH1 = 16
bActionAttackRH2 = 0
uActionAttackRH2 = 0
bActionAttackRH3 = 0
uActionAttackRH3 = 0
bActionAttackRH4 = 0
uActionAttackRH4 = 0

; Bash (OnHold)
bActionBashAnyInputOrder = 0
bActionBashMinHoldTime = 0
bActionBash1 = 1
uActionBash1 = 24
bActionBash2 = 0
uActionBash2 = 0
bActionBash3 = 0
uActionBash3 = 0
bActionBash4 = 0
uActionBash4 = 0

; Block (OnPressAndRelease)
bActionBlockAnyInputOrder = 0
bActionBlockMinHoldTime = 0
bActionBlock1 = 1
uActionBlock1 = 23
bActionBlock2 = 0
uActionBlock2 = 0
bActionBlock3 = 0
uActionBlock3 = 0
bActionBlock4 = 0
uActionBlock4 = 0

; CamLockOn (OnRelease)
bActionCamLockOnAnyInputOrder = 0
bActionCamLockOnConsecTap = 0
bActionCamLockOnMinHoldTime = 0
bActionCamLockOn1 = 1
uActionCamLockOn1 = 9
bActionCamLockOn2 = 1
uActionCamLockOn2 = 8
bActionCamLockOn3 = 0
uActionCamLockOn3 = 0
bActionCamLockOn4 = 0
uActionCamLockOn4 = 0

; CamManualPos (OnRelease)
bActionCamManualPosAnyInputOrder = 0
bActionCamManualPosConsecTap = 0
bActionCamManualPosMinHoldTime = 0
bActionCamManualPos1 = 1
uActionCamManualPos1 = 10
bActionCamManualPos2 = 1
uActionCamManualPos2 = 8
bActionCamManualPos3 = 0
uActionCamManualPos3 = 0
bActionCamManualPos4 = 0
uActionCamManualPos4 = 0

; CastLH (OnHold)
bActionCastLHAnyInputOrder = 0
bActionCastLHMinHoldTime = 0
bActionCastLH1 = 1
uActionCastLH1 = 23
bActionCastLH2 = 0
uActionCastLH2 = 0
bActionCastLH3 = 0
uActionCastLH3 = 0
bActionCastLH4 = 0
uActionCastLH4 = 0

; CastRH (OnHold)
bActionCastRHAnyInputOrder = 0
bActionCastRHMinHoldTime = 0
bActionCastRH1 = 1
uActionCastRH1 = 24
bActionCastRH2 = 0
uActionCastRH2 = 0
bActionCastRH3 = 0
uActionCastRH3 = 0
bActionCastRH4 = 0
uActionCastRH4 = 0

; ChangeDialoguePlayer (OnRelease)
bActionChangeDialoguePlayerAnyInputOrder = 0
bActionChangeDialoguePlayerConsecTap = 0
bActionChangeDialoguePlayerMinHoldTime = 0
bActionChangeDialoguePlayer1 = 1
uActionChangeDialoguePlayer1 = 63
bActionChangeDialoguePlayer2 = 0
uActionChangeDialoguePlayer2 = 0
bActionChangeDialoguePlayer3 = 0
uActionChangeDialoguePlayer3 = 0
bActionChangeDialoguePlayer4 = 0
uActionChangeDialoguePlayer4 = 0

; CoopDebugMenu (OnRelease)
bActionCoopDebugMenuAnyInputOrder = 0
bActionCoopDebugMenuConsecTap = 0
bActionCoopDebugMenuMinHoldTime = 0
bActionCoopDebugMenu1 = 1
uActionCoopDebugMenu1 = 5
bActionCoopDebugMenu2 = 1
uActionCoopDebugMenu2 = 6
bActionCoopDebugMenu3 = 0
uActionCoopDebugMenu3 = 0
bActionCoopDebugMenu4 = 0
uActionCoopDebugMenu4 = 0

; CoopIdlesMenu (OnRelease)
bActionCoopIdlesMenuAnyInputOrder = 0
bActionCoopIdlesMenuConsecTap = 0
bActionCoopIdlesMenuMinHoldTime = 0
bActionCoopIdlesMenu1 = 1
uActionCoopIdlesMenu1 = 10
bActionCoopIdlesMenu2 = 1
uActionCoopIdlesMenu2 = 4
bActionCoopIdlesMenu3 = 0
uActionCoopIdlesMenu3 = 0
bActionCoopIdlesMenu4 = 0
uActionCoopIdlesMenu4 = 0

; CoopMiniGamesMenu (OnRelease)
bActionCoopMiniGamesMenuAnyInputOrder = 0
bActionCoopMiniGamesMenuConsecTap = 0
bActionCoopMiniGamesMenuMinHoldTime = 0
bActionCoopMiniGamesMenu1 = 1
uActionCoopMiniGamesMenu1 = 10
bActionCoopMiniGamesMenu2 = 1
uActionCoopMiniGamesMenu2 = 3
bActionCoopMiniGamesMenu3 = 0
uActionCoopMiniGamesMenu3 = 0
bActionCoopMiniGamesMenu4 = 0
uActionCoopMiniGamesMenu4 = 0

; CoopSummoningMenu (OnRelease)
bActionCoopSummoningMenuAnyInputOrder = 0
bActionCoopSummoningMenuConsecTap = 0
bActionCoopSummoningMenuMinHoldTime = 0
bActionCoopSummoningMenu1 = 1
uActionCoopSummoningMenu1 = 6
bActionCoopSummoningMenu2 = 1
uActionCoopSummoningMenu2 = 5
bActionCoopSummoningMenu3 = 0
uActionCoopSummoningMenu3 = 0
bActionCoopSummoningMenu4 = 0
uActionCoopSummoningMenu4 = 0

; CycleAmmo (OnHold)
bActionCycleAmmoAnyInputOrder = 0
bActionCycleAmmoMinHoldTime = 0
bActionCycleAmmo1 = 1
uActionCycleAmmo1 = 9
bActionCycleAmmo2 = 1
uActionCycleAmmo2 = 14
bActionCycleAmmo3 = 0
uActionCycleAmmo3 = 0
bActionCycleAmmo4 = 0
uActionCycleAmmo4 = 0

; CycleSpellCategoryLH (OnHold)
bActionCycleSpellCategoryLHAnyInputOrder = 0
bActionCycleSpellCategoryLHMinHoldTime = 0
bActionCycleSpellCategoryLH1 = 1
uActionCycleSpellCategoryLH1 = 14
bActionCycleSpellCategoryLH2 = 1
uActionCycleSpellCategoryLH2 = 9
bActionCycleSpellCategoryLH3 = 0
uActionCycleSpellCategoryLH3 = 0
bActionCycleSpellCategoryLH4 = 0
uActionCycleSpellCategoryLH4 = 0

; CycleSpellCategoryRH (OnHold)
bActionCycleSpellCategoryRHAnyInputOrder = 0
bActionCycleSpellCategoryRHMinHoldTime = 0
bActionCycleSpellCategoryRH1 = 1
uActionCycleSpellCategoryRH1 = 14
bActionCycleSpellCategoryRH2 = 1
uActionCycleSpellCategoryRH2 = 10
bActionCycleSpellCategoryRH3 = 0
uActionCycleSpellCategoryRH3 = 0
bActionCycleSpellCategoryRH4 = 0
uActionCycleSpellCategoryRH4 = 0

; CycleSpellLH (OnHold)
bActionCycleSpellLHAnyInputOrder = 0
bActionCycleSpellLHMinHoldTime = 0
bActionCycleSpellLH1 = 1
uActionCycleSpellLH1 = 9
bActionCycleSpellLH2 = 1
uActionCycleSpellLH2 = 13
bActionCycleSpellLH3 = 0
uActionCycleSpellLH3 = 0
bActionCycleSpellLH4 = 0
uActionCycleSpellLH4 = 0

; CycleSpellRH (OnHold)
bActionCycleSpellRHAnyInputOrder = 0
bActionCycleSpellRHMinHoldTime = 0
bActionCycleSpellRH1 = 1
uActionCycleSpellRH1 = 10
bActionCycleSpellRH2 = 1
uActionCycleSpellRH2 = 13
bActionCycleSpellRH3 = 0
uActionCycleSpellRH3 = 0
bActionCycleSpellRH4 = 0
uActionCycleSpellRH4 = 0

; CycleVoiceSlotMagic (OnHold)
bActionCycleVoiceSlotMagicAnyInputOrder = 0
bActionCycleVoiceSlotMagicMinHoldTime = 0
bActionCycleVoiceSlotMagic1 = 1
uActionCycleVoiceSlotMagic1 = 10
bActionCycleVoiceSlotMagic2 = 1
uActionCycleVoiceSlotMagic2 = 14
bActionCycleVoiceSlotMagic3 = 0
uActionCycleVoiceSlotMagic3 = 0
bActionCycleVoiceSlotMagic4 = 0
uActionCycleVoiceSlotMagic4 = 0

; CycleWeaponCategoryLH (OnHold)
bActionCycleWeaponCategoryLHAnyInputOrder = 0
bActionCycleWeaponCategoryLHMinHoldTime = 0
bActionCycleWeaponCategoryLH1 = 1
uActionCycleWeaponCategoryLH1 = 14
bActionCycleWeaponCategoryLH2 = 1
uActionCycleWeaponCategoryLH2 = 15
bActionCycleWeaponCategoryLH3 = 0
uActionCycleWeaponCategoryLH3 = 0
bActionCycleWeaponCategoryLH4 = 0
uActionCycleWeaponCategoryLH4 = 0

; CycleWeaponCategoryRH (OnHold)
bActionCycleWeaponCategoryRHAnyInputOrder = 0
bActionCycleWeaponCategoryRHMinHoldTime = 0
bActionCycleWeaponCategoryRH1 = 1
uActionCycleWeaponCategoryRH1 = 14
bActionCycleWeaponCategoryRH2 = 1
uActionCycleWeaponCategoryRH2 = 16
bActionCycleWeaponCategoryRH3 = 0
uActionCycleWeaponCategoryRH3 = 0
bActionCycleWeaponCategoryRH4 = 0
uActionCycleWeaponCategoryRH4 = 0

; CycleWeaponLH (OnHold)
bActionCycleWeaponLHAnyInputOrder = 0
bActionCycleWeaponLHMinHoldTime = 0
bActionCycleWeaponLH1 = 1
uActionCycleWeaponLH1 = 9
bActionCycleWeaponLH2 = 1
uActionCycleWeaponLH2 = 12
bActionCycleWeaponLH3 = 0
uActionCycleWeaponLH3 = 0
bActionCycleWeaponLH4 = 0
uActionCycleWeaponLH4 = 0

; CycleWeaponRH (OnHold)
bActionCycleWeaponRHAnyInputOrder = 0
bActionCycleWeaponRHMinHoldTime = 0
bActionCycleWeaponRH1 = 1
uActionCycleWeaponRH1 = 10
bActionCycleWeaponRH2 = 1
uActionCycleWeaponRH2 = 12
bActionCycleWeaponRH3 = 0
uActionCycleWeaponRH3 = 0
bActionCycleWeaponRH4 = 0
uActionCycleWeaponRH4 = 0

; DebugRagdollPlayer (OnRelease)
bActionDebugRagdollPlayerAnyInputOrder = 0
bActionDebugRagdollPlayerConsecTap = 0
bActionDebugRagdollPlayerMinHoldTime = 0
bActionDebugRagdollPlayer1 = 1
uActionDebugRagdollPlayer1 = 9
bActionDebugRagdollPlayer2 = 1
uActionDebugRagdollPlayer2 = 4
bActionDebugRagdollPlayer3 = 0
uActionDebugRagdollPlayer3 = 0
bActionDebugRagdollPlayer4 = 0
uActionDebugRagdollPlayer4 = 0

; DebugReEquipHandForms (OnRelease)
bActionDebugReEquipHandFormsAnyInputOrder = 0
bActionDebugReEquipHandFormsConsecTap = 0
bActionDebugReEquipHandFormsMinHoldTime = 0
bActionDebugReEquipHandForms1 = 1
uActionDebugReEquipHandForms1 = 9
bActionDebugReEquipHandForms2 = 1
uActionDebugReEquipHandForms2 = 3
bActionDebugReEquipHandForms3 = 0
uActionDebugReEquipHandForms3 = 0
bActionDebugReEquipHandForms4 = 0
uActionDebugReEquipHandForms4 = 0

; DebugRefreshPlayerManagers (OnRelease)
bActionDebugRefreshPlayerManagersAnyInputOrder = 0
bActionDebugRefreshPlayerManagersConsecTap = 0
bActionDebugRefreshPlayerManagersMinHoldTime = 0
bActionDebugRefreshPlayerManagers1 = 1
uActionDebugRefreshPlayerManagers1 = 9
bActionDebugRefreshPlayerManagers2 = 1
uActionDebugRefreshPlayerManagers2 = 2
bActionDebugRefreshPlayerManagers3 = 0
uActionDebugRefreshPlayerManagers3 = 0
bActionDebugRefreshPlayerManagers4 = 0
uActionDebugRefreshPlayerManagers4 = 0

; DebugResetPlayer (OnRelease)
bActionDebugResetPlayerAnyInputOrder = 0
bActionDebugResetPlayerConsecTap = 0
bActionDebugResetPlayerMinHoldTime = 0
bActionDebugResetPlayer1 = 1
uActionDebugResetPlayer1 = 9
bActionDebugResetPlayer2 = 1
uActionDebugResetPlayer2 = 1
bActionDebugResetPlayer3 = 0
uActionDebugResetPlayer3 = 0
bActionDebugResetPlayer4 = 0
uActionDebugResetPlayer4 = 0

; DisableCoopCam (OnRelease)
bActionDisableCoopCamAnyInputOrder = 1
bActionDisableCoopCamConsecTap = 0
bActionDisableCoopCamMinHoldTime = 0
bActionDisableCoopCam1 = 1
uActionDisableCoopCam1 = 7
bActionDisableCoopCam2 = 1
uActionDisableCoopCam2 = 8
bActionDisableCoopCam3 = 0
uActionDisableCoopCam3 = 0
bActionDisableCoopCam4 = 0
uActionDisableCoopCam4 = 0

; Dismount (OnRelease)
bActionDismountAnyInputOrder = 0
bActionDismountConsecTap = 0
bActionDismountMinHoldTime = 0
bActionDismount1 = 1
uActionDismount1 = 79
bActionDismount2 = 0
uActionDismount2 = 0
bActionDismount3 = 0
uActionDismount3 = 0
bActionDismount4 = 0
uActionDismount4 = 0

; Dodge (OnRelease)
bActionDodgeAnyInputOrder = 0
bActionDodgeConsecTap = 0
bActionDodgeMinHoldTime = 0
bActionDodge1 = 1
uActionDodge1 = 81
bActionDodge2 = 0
uActionDodge2 = 0
bActionDodge3 = 0
uActionDodge3 = 0
bActionDodge4 = 0
uActionDodge4 = 0

; FaceTarget (OnRelease)
bActionFaceTargetAnyInputOrder = 0
bActionFaceTargetConsecTap = 0
bActionFaceTargetMinHoldTime = 0
bActionFaceTarget1 = 1
uActionFaceTarget1 = 9
bActionFaceTarget2 = 0
uActionFaceTarget2 = 0
bActionFaceTarget3 = 0
uActionFaceTarget3 = 0
bActionFaceTarget4 = 0
uActionFaceTarget4 = 0

; Favorites (OnRelease)
bActionFavoritesAnyInputOrder = 0
bActionFavoritesConsecTap = 0
bActionFavoritesMinHoldTime = 0
bActionFavorites1 = 1
uActionFavorites1 = 6
bActionFavorites2 = 0
uActionFavorites2 = 0
bActionFavorites3 = 0
uActionFavorites3 = 0
bActionFavorites4 = 0
uActionFavorites4 = 0

; GrabObject (OnHold)
bActionGrabObjectAnyInputOrder = 0
bActionGrabObjectMinHoldTime = 0
bActionGrabObject1 = 1
uActionGrabObject1 = 53
bActionGrabObject2 = 1
uActionGrabObject2 = 19
bActionGrabObject3 = 0
uActionGrabObject3 = 0
bActionGrabObject4 = 0
uActionGrabObject4 = 0

; GrabRotateYZ (NoAction)
bActionGrabRotateYZAnyInputOrder = 1
bActionGrabRotateYZMinHoldTime = 0
bActionGrabRotateYZ1 = 1
uActionGrabRotateYZ1 = 53
bActionGrabRotateYZ2 = 1
uActionGrabRotateYZ2 = 8
bActionGrabRotateYZ3 = 1
uActionGrabRotateYZ3 = 18
bActionGrabRotateYZ4 = 0
uActionGrabRotateYZ4 = 0

; HotkeyEquip (OnHold)
bActionHotkeyEquipAnyInputOrder = 1
bActionHotkeyEquipMinHoldTime = 0
bActionHotkeyEquip1 = 1
uActionHotkeyEquip1 = 8
bActionHotkeyEquip2 = 1
uActionHotkeyEquip2 = 18
bActionHotkeyEquip3 = 0
uActionHotkeyEquip3 = 0
bActionHotkeyEquip4 = 0
uActionHotkeyEquip4 = 0

; Inventory (OnRelease)
bActionInventoryAnyInputOrder = 0
bActionInventoryConsecTap = 0
bActionInventoryMinHoldTime = 0
bActionInventory1 = 1
uActionInventory1 = 4
bActionInventory2 = 0
uActionInventory2 = 0
bActionInventory3 = 0
uActionInventory3 = 0
bActionInventory4 = 0
uActionInventory4 = 0

; Jump (OnRelease)
bActionJumpAnyInputOrder = 0
bActionJumpConsecTap = 0
bActionJumpMinHoldTime = 0
bActionJump1 = 1
uActionJump1 = 14
bActionJump2 = 0
uActionJump2 = 0
bActionJump3 = 0
uActionJump3 = 0
bActionJump4 = 0
uActionJump4 = 0

; MagicMenu (OnRelease)
bActionMagicMenuAnyInputOrder = 0
bActionMagicMenuConsecTap = 0
bActionMagicMenuMinHoldTime = 0
bActionMagicMenu1 = 1
uActionMagicMenu1 = 3
bActionMagicMenu2 = 0
uActionMagicMenu2 = 0
bActionMagicMenu3 = 0
uActionMagicMenu3 = 0
bActionMagicMenu4 = 0
uActionMagicMenu4 = 0

; MapMenu (OnRelease)
bActionMapMenuAnyInputOrder = 0
bActionMapMenuConsecTap = 0
bActionMapMenuMinHoldTime = 0
bActionMapMenu1 = 1
uActionMapMenu1 = 2
bActionMapMenu2 = 0
uActionMapMenu2 = 0
bActionMapMenu3 = 0
uActionMapMenu3 = 0
bActionMapMenu4 = 0
uActionMapMenu4 = 0

; MoveCrosshair (NoAction)
bActionMoveCrosshairAnyInputOrder = 0
bActionMoveCrosshairMinHoldTime = 0
bActionMoveCrosshair1 = 1
uActionMoveCrosshair1 = 18
bActionMoveCrosshair2 = 0
uActionMoveCrosshair2 = 0
bActionMoveCrosshair3 = 0
uActionMoveCrosshair3 = 0
bActionMoveCrosshair4 = 0
uActionMoveCrosshair4 = 0

; Pause (OnRelease)
bActionPauseAnyInputOrder = 0
bActionPauseConsecTap = 0
bActionPauseMinHoldTime = 0
bActionPause1 = 1
uActionPause1 = 5
bActionPause2 = 0
uActionPause2 = 0
bActionPause3 = 0
uActionPause3 = 0
bActionPause4 = 0
uActionPause4 = 0

; PowerAttackDual (OnRelease)
bActionPowerAttackDualAnyInputOrder = 1
bActionPowerAttackDualConsecTap = 0
bActionPowerAttackDualMinHoldTime = 0
bActionPowerAttackDual1 = 1
uActionPowerAttackDual1 = 10
bActionPowerAttackDual2 = 1
uActionPowerAttackDual2 = 24
bActionPowerAttackDual3 = 1
uActionPowerAttackDual3 = 23
bActionPowerAttackDual4 = 0
uActionPowerAttackDual4 = 0

; PowerAttackLH (OnRelease)
bActionPowerAttackLHAnyInputOrder = 0
bActionPowerAttackLHConsecTap = 0
bActionPowerAttackLHMinHoldTime = 0
bActionPowerAttackLH1 = 1
uActionPowerAttackLH1 = 10
bActionPowerAttackLH2 = 1
uActionPowerAttackLH2 = 23
bActionPowerAttackLH3 = 0
uActionPowerAttackLH3 = 0
bActionPowerAttackLH4 = 0
uActionPowerAttackLH4 = 0

; PowerAttackRH (OnRelease)
bActionPowerAttackRHAnyInputOrder = 0
bActionPowerAttackRHConsecTap = 0
bActionPowerAttackRHMinHoldTime = 0
bActionPowerAttackRH1 = 1
uActionPowerAttackRH1 = 10
bActionPowerAttackRH2 = 1
uActionPowerAttackRH2 = 24
bActionPowerAttackRH3 = 0
uActionPowerAttackRH3 = 0
bActionPowerAttackRH4 = 0
uActionPowerAttackRH4 = 0

; QuickSlotCast (OnHold)
bActionQuickSlotCastAnyInputOrder = 0
bActionQuickSlotCastMinHoldTime = 0
bActionQuickSlotCast1 = 1
uActionQuickSlotCast1 = 9
bActionQuickSlotCast2 = 1
uActionQuickSlotCast2 = 10
bActionQuickSlotCast3 = 1
uActionQuickSlotCast3 = 80
bActionQuickSlotCast4 = 0
uActionQuickSlotCast4 = 0

; QuickSlotItem (OnRelease)
bActionQuickSlotItemAnyInputOrder = 0
bActionQuickSlotItemConsecTap = 0
bActionQuickSlotItemMinHoldTime = 0
bActionQuickSlotItem1 = 1
uActionQuickSlotItem1 = 10
bActionQuickSlotItem2 = 1
uActionQuickSlotItem2 = 9
bActionQuickSlotItem3 = 1
uActionQuickSlotItem3 = 80
bActionQuickSlotItem4 = 0
uActionQuickSlotItem4 = 0

; ResetAim (OnRelease)
bActionResetAimAnyInputOrder = 0
bActionResetAimConsecTap = 0
bActionResetAimMinHoldTime = 0
bActionResetAim1 = 1
uActionResetAim1 = 10
bActionResetAim2 = 0
uActionResetAim2 = 0
bActionResetAim3 = 0
uActionResetAim3 = 0
bActionResetAim4 = 0
uActionResetAim4 = 0

; RotateCam (OnPressAndRelease)
bActionRotateCamAnyInputOrder = 1
bActionRotateCamMinHoldTime = 0
bActionRotateCam1 = 1
uActionRotateCam1 = 10
bActionRotateCam2 = 1
uActionRotateCam2 = 18
bActionRotateCam3 = 0
uActionRotateCam3 = 0
bActionRotateCam4 = 0
uActionRotateCam4 = 0

; RotateLeftForearm (NoAction)
bActionRotateLeftForearmAnyInputOrder = 1
bActionRotateLeftForearmMinHoldTime = 0
bActionRotateLeftForearm1 = 1
uActionRotateLeftForearm1 = 9
bActionRotateLeftForearm2 = 1
uActionRotateLeftForearm2 = 23
bActionRotateLeftForearm3 = 1
uActionRotateLeftForearm3 = 18
bActionRotateLeftForearm4 = 0
uActionRotateLeftForearm4 = 0

; RotateLeftHand (NoAction)
bActionRotateLeftHandAnyInputOrder = 1
bActionRotateLeftHandMinHoldTime = 0
bActionRotateLeftHand1 = 1
uActionRotateLeftHand1 = 9
bActionRotateLeftHand2 = 1
uActionRotateLeftHand2 = 23
bActionRotateLeftHand3 = 1
uActionRotateLeftHand3 = 8
bActionRotateLeftHand4 = 1
uActionRotateLeftHand4 = 18

; RotateLeftShoulder (NoAction)
bActionRotateLeftShoulderAnyInputOrder = 1
bActionRotateLeftShoulderMinHoldTime = 0
bActionRotateLeftShoulder1 = 1
uActionRotateLeftShoulder1 = 23
bActionRotateLeftShoulder2 = 1
uActionRotateLeftShoulder2 = 18
bActionRotateLeftShoulder3 = 0
uActionRotateLeftShoulder3 = 0
bActionRotateLeftShoulder4 = 0
uActionRotateLeftShoulder4 = 0

; RotateRightForearm (NoAction)
bActionRotateRightForearmAnyInputOrder = 1
bActionRotateRightForearmMinHoldTime = 0
bActionRotateRightForearm1 = 1
uActionRotateRightForearm1 = 10
bActionRotateRightForearm2 = 1
uActionRotateRightForearm2 = 24
bActionRotateRightForearm3 = 1
uActionRotateRightForearm3 = 18
bActionRotateRightForearm4 = 0
uActionRotateRightForearm4 = 0

; RotateRightHand (NoAction)
bActionRotateRightHandAnyInputOrder = 1
bActionRotateRightHandMinHoldTime = 0
bActionRotateRightHand1 = 1
uActionRotateRightHand1 = 10
bActionRotateRightHand2 = 1
uActionRotateRightHand2 = 24
bActionRotateRightHand3 = 1
uActionRotateRightHand3 = 8
bActionRotateRightHand4 = 1
uActionRotateRightHand4 = 18

; RotateRightShoulder (NoAction)
bActionRotateRightShoulderAnyInputOrder = 1
bActionRotateRightShoulderMinHoldTime = 0
bActionRotateRightShoulder1 = 1
uActionRotateRightShoulder1 = 24
bActionRotateRightShoulder2 = 1
uActionRotateRightShoulder2 = 18
bActionRotateRightShoulder3 = 0
uActionRotateRightShoulder3 = 0
bActionRotateRightShoulder4 = 0
uActionRotateRightShoulder4 = 0

; Sheathe (OnRelease)
bActionSheatheAnyInputOrder = 0
bActionSheatheConsecTap = 0
bActionSheatheMinHoldTime = 0
bActionSheathe1 = 1
uActionSheathe1 = 8
bActionSheathe2 = 0
uActionSheathe2 = 0
bActionSheathe3 = 0
uActionSheathe3 = 0
bActionSheathe4 = 0
uActionSheathe4 = 0

; Shout (OnHold)
bActionShoutAnyInputOrder = 0
bActionShoutMinHoldTime = 0
bActionShout1 = 1
uActionShout1 = 10
bActionShout2 = 1
uActionShout2 = 11
bActionShout3 = 0
uActionShout3 = 0
bActionShout4 = 0
uActionShout4 = 0

; Sneak (OnRelease)
bActionSneakAnyInputOrder = 0
bActionSneakConsecTap = 0
bActionSneakMinHoldTime = 0
bActionSneak1 = 1
uActionSneak1 = 7
bActionSneak2 = 0
uActionSneak2 = 0
bActionSneak3 = 0
uActionSneak3 = 0
bActionSneak4 = 0
uActionSneak4 = 0

; SpecialAction (OnHold)
bActionSpecialActionAnyInputOrder = 0
bActionSpecialActionMinHoldTime = 0
bActionSpecialAction1 = 1
uActionSpecialAction1 = 13
bActionSpecialAction2 = 0
uActionSpecialAction2 = 0
bActionSpecialAction3 = 0
uActionSpecialAction3 = 0
bActionSpecialAction4 = 0
uActionSpecialAction4 = 0

; Sprint (OnPressAndRelease)
bActionSprintAnyInputOrder = 0
bActionSprintMinHoldTime = 1
bActionSprint1 = 1
uActionSprint1 = 12
bActionSprint2 = 0
uActionSprint2 = 0
bActionSprint3 = 0
uActionSprint3 = 0
bActionSprint4 = 0
uActionSprint4 = 0

; StatsMenu (OnRelease)
bActionStatsMenuAnyInputOrder = 0
bActionStatsMenuConsecTap = 0
bActionStatsMenuMinHoldTime = 0
bActionStatsMenu1 = 1
uActionStatsMenu1 = 1
bActionStatsMenu2 = 0
uActionStatsMenu2 = 0
bActionStatsMenu3 = 0
uActionStatsMenu3 = 0
bActionStatsMenu4 = 0
uActionStatsMenu4 = 0

; TeleportToPlayer (OnRelease)
bActionTeleportToPlayerAnyInputOrder = 0
bActionTeleportToPlayerConsecTap = 0
bActionTeleportToPlayerMinHoldTime = 0
bActionTeleportToPlayer1 = 1
uActionTeleportToPlayer1 = 10
bActionTeleportToPlayer2 = 1
uActionTeleportToPlayer2 = 1
bActionTeleportToPlayer3 = 0
uActionTeleportToPlayer3 = 0
bActionTeleportToPlayer4 = 0
uActionTeleportToPlayer4 = 0

; TradeWithPlayer (OnRelease)
bActionTradeWithPlayerAnyInputOrder = 0
bActionTradeWithPlayerConsecTap = 0
bActionTradeWithPlayerMinHoldTime = 0
bActionTradeWithPlayer1 = 1
uActionTradeWithPlayer1 = 10
bActionTradeWithPlayer2 = 1
uActionTradeWithPlayer2 = 2
bActionTradeWithPlayer3 = 0
uActionTradeWithPlayer3 = 0
bActionTradeWithPlayer4 = 0
uActionTradeWithPlayer4 = 0

; TweenMenu (OnRelease)
bActionTweenMenuAnyInputOrder = 0
bActionTweenMenuConsecTap = 0
bActionTweenMenuMinHoldTime = 0
bActionTweenMenu1 = 1
uActionTweenMenu1 = 10
bActionTweenMenu2 = 1
uActionTweenMenu2 = 5
bActionTweenMenu3 = 0
uActionTweenMenu3 = 0
bActionTweenMenu4 = 0
uActionTweenMenu4 = 0

; WaitMenu (OnRelease)
bActionWaitMenuAnyInputOrder = 0
bActionWaitMenuConsecTap = 0
bActionWaitMenuMinHoldTime = 0
bActionWaitMenu1 = 1
uActionWaitMenu1 = 9
bActionWaitMenu2 = 1
uActionWaitMenu2 = 6
bActionWaitMenu3 = 0
uActionWaitMenu3 = 0
bActionWaitMenu4 = 0
uActionWaitMenu4 = 0

; ZoomCam (OnPressAndRelease)
bActionZoomCamAnyInputOrder = 1
bActionZoomCamMinHoldTime = 0
bActionZoomCam1 = 1
uActionZoomCam1 = 9
bActionZoomCam2 = 1
uActionZoomCam2 = 18
bActionZoomCam3 = 0
uActionZoomCam3 = 0
bActionZoomCam4 = 0
uActionZoomCam4 = 0

[Player3]
; [Stat Modifiers]
; Multipliers applied to a co-op actor's health, magicka, and stamina cost/regen values.
; [0.0, 100.0]
fHealthRegenMult = 1.0
fMagickaCostMult = 1.0
fMagickaRegenMult = 1.0
fStaminaCostMult = 1.0
fStaminaRegenMult = 1.0

; Ratio of health/magicka/stamina regen rate in combat to health/magicka/stamina regen rate out of combat.
; [0.0, 1.0]
fHealthRegenCombatRatio = 0.70
fMagickaRegenCombatRatio = 0.33
fStaminaRegenCombatRatio = 0.35

; [Damage Modifiers]
; Multiplier applied to this player's dealt damage.
; Applies to most sources of damage, especially direct sources such as melee attacks or non-explosive hits.
; [0.0, 100.0]
fDamageDealtMult = 1.0

; Multiplier applied to this player's received damage.
; Applies to most sources of damage, especially direct sources such as melee attacks or non-explosive hits.
; [0.0, 100.0]
fDamageReceivedMult = 1.0

; Flop damage mult. For no reason at all.
; [0.0, 100.0]
fFlopDamageMult = 1.0

; Multiplier to the damage dealt to any NPCs that were knocked down by a slap.
; [0.0, 100.0]
fSlapKnockdownDamageMult = 1.0

; Damage mult for thrown objects.
; [0.0, 100.0]
fThrownObjectDamageMult = 1.0

; [Controller]
; Proportion of full displacement from center to serve as the analog stick deadzone.
; [0.01, 0.99]
fAnalogDeadzoneRatio = 0.25

; Proportion of full trigger activation to serve as the trigger deadzone.
; [0.01, 0.99]
fTriggerDeadzoneRatio = 0.25

; [Progression]
; Skill XP multiplier applied whenever this player receives XP for using a skill.
; [0, 10.0]
fSkillXPMult = 1.0

; [Targeting]
; Can players select other players with their crosshairs?
bCanTargetOtherPlayers = 1

; Crosshair magnetism: crosshair slows down when over a target.
; Use crosshair magnetism for Actors.
bCrosshairMagnetismForActors = 1

; Use crosshair magnetism for Object References (all other selectable objects).
bCrosshairMagnetismForObjRefs = 1

; If enabled, attacking party-friendly actors 
; (followers, player allies, summons, and other players) 
; will do damage as usual and reward XP to the attacking player.
; Otherwise, any damage done is negated and no XP is awarded.
; NOTE: For player 1, if disabled, only the damage dealt to friendly actors is negated.
; No other changes were made to the default friendly fire behavior for player 1.
bFriendlyFire = 0

; When no object is selected by the crosshair and the player is attacking,
; aim correction will automatically target an NPC within the player's field-of-view window.
; If the player is attacking nearby hostile NPCs, aim correction will target an NPC 
; that is hostile to a player or ally. Otherwise, if the player is casting a targeted healing spell, 
; aim correction will target other players and allies.
bUseAimCorrection = 1

; If enabled, screenspace (2D) positions and directions are used to select an aim correction target; 
; otherwise worldspace (3D) positions and directions are used. 
; For screenspace checks, imagine an arrow connecting the player's torso to an NPC's torso on the screen
; and move the left stick along that arrow to select the target. 
; For worldspace checks, the player should move towards the target NPC's world position to select them.
bScreenspaceBasedAimCorrectionCheck = 0

; Angular window (degrees) centered at the player's current left stick/heading angle
; within which any actors will be considered as targets for attack auto-aim adjustment.
; Only used when the player is not targeting an actor with their crosshair.
; [0, 360.0]
fAimCorrectionFOV = 90.0

; Max angular adjustment speed (degrees per second) when adjusting the player's aim pitch.
; [0, 720.0]
fMaxAimPitchAdjustmentRate = 180.000000

; 0: Homing projectiles that follow the crosshair.
; 1: Experimental. Projectiles move to the predicted target intercept position.
; Note for aim prediction: tends to be pretty inaccurate when targets change direction quickly
; or when shooting a lobbed projectile.
uProjectileTrajectoryType = 1

; [UI]
; Animated crosshair (animated rotation and oscillation about center).
bAnimatedCrosshair = 1

; 0: Use generic four-prongs style.
; 1: Use Skyrim-style crosshair.
bSkyrimStyleCrosshair = 1

; Fade inactive crosshair when not targeting an object, not moving the crosshair, and not in 'face target' mode.
bFadeInactiveCrosshair = 1

; Re-center inactive crosshair when not targeting an object, not moving the crosshair, and not in 'face target' mode.
bRecenterInactiveCrosshair = 1

; Show an arrow indicator when adjusting or resetting the player's aim pitch 
; or when moving grabbed objects closer to/farther from the player.
bEnableAimPitchIndicator = 1

; Show the expected trajectory for any charged spells, drawn arrows/bolts, 
; and grabbed objects that are about to be thrown.
bEnablePredictedProjectileTrajectoryCurves = 1

; Thickness of any predicted projectile trajectory curves (pixels).
; [1.0, 10.0]
fPredictedProjectileTrajectoryCurveThickness = 2.0

; Crosshair gap radius (pixels).
; [0, 100.0]
fCrosshairGapRadius = 4.0

; Crosshair length (pixels).
; [0, 100.0]
fCrosshairLength = 12.0

; Crosshair thickness (pixels).
; [0, 25.0]
fCrosshairThickness = 2.0

; Crosshair horizontal movement sensitivities for each player.
; Fraction of max pixels per second (fCrosshairMaxTraversablePixelsPerSec).
; For example, a value of '0.5' means the crosshair will move
; across a distance equal to half the max pixels traversable per second.
; [0, 1.0]
fCrosshairHorizontalSensitivity = 0.5

; Crosshair vertical movement sensitivities for each player.
; Fraction of max pixels per second (fCrosshairMaxTraversablePixelsPerSec).
; For example, a value of '0.5' means the crosshair will move
; across a distance equal to half the max pixels traversable per second.
; [0, 1.0]
fCrosshairVerticalSensitivity = 0.5

; Player indicator side length (pixels).
; [1.0, 100.0]
fPlayerIndicatorLength = 30.0

; Player indicator side thickness (pixels).
; [1.0, 10.0]
fPlayerIndicatorThickness = 5.0

; Overlay and crosshair colors (RRGGBB) in hex.
sOverlayRGBValue = 00FFFF

; Inner outline is always drawn.
; Black by default.
sCrosshairInnerOutlineRGB = 000000

; Outer outline is only drawn when the crosshair is highlighting a valid target.
; White by default.
sCrosshairOuterOutlineRGB = FFFFFF

; Alpha ranges from 0 (0x0) to 255 (0xFF)
; and determines the transparency of UI elements.
; [0, 255]
uOverlayAlpha = 255

; [0, 255]
uCrosshairInnerOutlineAlpha = 255

; [0, 255]
uCrosshairOuterOutlineAlpha = 255

; 0: Never show the player indicator.
; 1: Only show when the player is obscured or below a certain pixel height on the screen.
; 2: Show the player indicator at all times.
uPlayerIndicatorVisibilityType = 1

; [Timer Intervals]
; Minimum number of seconds to move across and through a crosshair target at max right stick displacement. 
; Serves as a 'stickiness' factor, meaning increasing the interval keeps the crosshair 
; stuck on the target for longer when moving through it.
; [0.0, 2.0]
fMinSecsCrosshairTargetTraversal = 0.2

; Seconds before fading/re-centering the crosshair when it is not over a target, not in 'Face Target' mode, 
; and not being moved at all by the player.
; [0.5, 10.0]
fSecsBeforeRemovingInactiveCrosshair = 2.0

; Seconds to oscillate an animated crosshair (if enabled) from fully contracted to fully expanded.
; [0.1, 10.0]
fSecsToOscillateCrosshair = 1.5

; Seconds to rotate an animated crosshair (if enabled) from its default '+' orientation to its 'x' ('Face Target') configuration or vice versa.
; [0.1, 5.0]
fSecsToRotateCrosshair = 0.5

; [Binds]
; Activate (OnHold)
bActionActivateAnyInputOrder = 0
bActionActivateMinHoldTime = 0
bActionActivate1 = 1
uActionActivate1 = 11
bActionActivate2 = 0
uActionActivate2 = 0
bActionActivate3 = 0
uActionActivate3 = 0
bActionActivate4 = 0
uActionActivate4 = 0

; ActivateAllOfType (OnRelease)
bActionActivateAllOfTypeAnyInputOrder = 0
bActionActivateAllOfTypeConsecTap = 0
bActionActivateAllOfTypeMinHoldTime = 0
bActionActivateAllOfType1 = 1
uActionActivateAllOfType1 = 19
bActionActivateAllOfType2 = 1
uActionActivateAllOfType2 = 9
bActionActivateAllOfType3 = 0
uActionActivateAllOfType3 = 0
bActionActivateAllOfType4 = 0
uActionActivateAllOfType4 = 0

; ActivateCancel (OnRelease)
bActionActivateCancelAnyInputOrder = 0
bActionActivateCancelConsecTap = 0
bActionActivateCancelMinHoldTime = 0
bActionActivateCancel1 = 1
uActionActivateCancel1 = 19
bActionActivateCancel2 = 1
uActionActivateCancel2 = 10
bActionActivateCancel3 = 0
uActionActivateCancel3 = 0
bActionActivateCancel4 = 0
uActionActivateCancel4 = 0

; AdjustAimPitch (OnPressAndRelease)
bActionAdjustAimPitchAnyInputOrder = 1
bActionAdjustAimPitchMinHoldTime = 0
bActionAdjustAimPitch1 = 1
uActionAdjustAimPitch1 = 9
bActionAdjustAimPitch2 = 1
uActionAdjustAimPitch2 = 10
bActionAdjustAimPitch3 = 1
uActionAdjustAimPitch3 = 18
bActionAdjustAimPitch4 = 0
uActionAdjustAimPitch4 = 0

; AttackLH (OnHold)
bActionAttackLHAnyInputOrder = 0
bActionAttackLHMinHoldTime = 0
bActionAttackLH1 = 1
uActionAttackLH1 = 15
bActionAttackLH2 = 0
uActionAttackLH2 = 0
bActionAttackLH3 = 0
uActionAttackLH3 = 0
bActionAttackLH4 = 0
uActionAttackLH4 = 0

; AttackRH (OnHold)
bActionAttackRHAnyInputOrder = 0
bActionAttackRHMinHoldTime = 0
bActionAttackRH1 = 1
uActionAttackRH1 = 16
bActionAttackRH2 = 0
uActionAttackRH2 = 0
bActionAttackRH3 = 0
uActionAttackRH3 = 0
bActionAttackRH4 = 0
uActionAttackRH4 = 0

; Bash (OnHold)
bActionBashAnyInputOrder = 0
bActionBashMinHoldTime = 0
bActionBash1 = 1
uActionBash1 = 24
bActionBash2 = 0
uActionBash2 = 0
bActionBash3 = 0
uActionBash3 = 0
bActionBash4 = 0
uActionBash4 = 0

; Block (OnPressAndRelease)
bActionBlockAnyInputOrder = 0
bActionBlockMinHoldTime = 0
bActionBlock1 = 1
uActionBlock1 = 23
bActionBlock2 = 0
uActionBlock2 = 0
bActionBlock3 = 0
uActionBlock3 = 0
bActionBlock4 = 0
uActionBlock4 = 0

; CamLockOn (OnRelease)
bActionCamLockOnAnyInputOrder = 0
bActionCamLockOnConsecTap = 0
bActionCamLockOnMinHoldTime = 0
bActionCamLockOn1 = 1
uActionCamLockOn1 = 9
bActionCamLockOn2 = 1
uActionCamLockOn2 = 8
bActionCamLockOn3 = 0
uActionCamLockOn3 = 0
bActionCamLockOn4 = 0
uActionCamLockOn4 = 0

; CamManualPos (OnRelease)
bActionCamManualPosAnyInputOrder = 0
bActionCamManualPosConsecTap = 0
bActionCamManualPosMinHoldTime = 0
bActionCamManualPos1 = 1
uActionCamManualPos1 = 10
bActionCamManualPos2 = 1
uActionCamManualPos2 = 8
bActionCamManualPos3 = 0
uActionCamManualPos3 = 0
bActionCamManualPos4 = 0
uActionCamManualPos4 = 0

; CastLH (OnHold)
bActionCastLHAnyInputOrder = 0
bActionCastLHMinHoldTime = 0
bActionCastLH1 = 1
uActionCastLH1 = 23
bActionCastLH2 = 0
uActionCastLH2 = 0
bActionCastLH3 = 0
uActionCastLH3 = 0
bActionCastLH4 = 0
uActionCastLH4 = 0

; CastRH (OnHold)
bActionCastRHAnyInputOrder = 0
bActionCastRHMinHoldTime = 0
bActionCastRH1 = 1
uActionCastRH1 = 24
bActionCastRH2 = 0
uActionCastRH2 = 0
bActionCastRH3 = 0
uActionCastRH3 = 0
bActionCastRH4 = 0
uActionCastRH4 = 0

; ChangeDialoguePlayer (OnRelease)
bActionChangeDialoguePlayerAnyInputOrder = 0
bActionChangeDialoguePlayerConsecTap = 0
bActionChangeDialoguePlayerMinHoldTime = 0
bActionChangeDialoguePlayer1 = 1
uActionChangeDialoguePlayer1 = 63
bActionChangeDialoguePlayer2 = 0
uActionChangeDialoguePlayer2 = 0
bActionChangeDialoguePlayer3 = 0
uActionChangeDialoguePlayer3 = 0
bActionChangeDialoguePlayer4 = 0
uActionChangeDialoguePlayer4 = 0

; CoopDebugMenu (OnRelease)
bActionCoopDebugMenuAnyInputOrder = 0
bActionCoopDebugMenuConsecTap = 0
bActionCoopDebugMenuMinHoldTime = 0
bActionCoopDebugMenu1 = 1
uActionCoopDebugMenu1 = 5
bActionCoopDebugMenu2 = 1
uActionCoopDebugMenu2 = 6
bActionCoopDebugMenu3 = 0
uActionCoopDebugMenu3 = 0
bActionCoopDebugMenu4 = 0
uActionCoopDebugMenu4 = 0

; CoopIdlesMenu (OnRelease)
bActionCoopIdlesMenuAnyInputOrder = 0
bActionCoopIdlesMenuConsecTap = 0
bActionCoopIdlesMenuMinHoldTime = 0
bActionCoopIdlesMenu1 = 1
uActionCoopIdlesMenu1 = 10
bActionCoopIdlesMenu2 = 1
uActionCoopIdlesMenu2 = 4
bActionCoopIdlesMenu3 = 0
uActionCoopIdlesMenu3 = 0
bActionCoopIdlesMenu4 = 0
uActionCoopIdlesMenu4 = 0

; CoopMiniGamesMenu (OnRelease)
bActionCoopMiniGamesMenuAnyInputOrder = 0
bActionCoopMiniGamesMenuConsecTap = 0
bActionCoopMiniGamesMenuMinHoldTime = 0
bActionCoopMiniGamesMenu1 = 1
uActionCoopMiniGamesMenu1 = 10
bActionCoopMiniGamesMenu2 = 1
uActionCoopMiniGamesMenu2 = 3
bActionCoopMiniGamesMenu3 = 0
uActionCoopMiniGamesMenu3 = 0
bActionCoopMiniGamesMenu4 = 0
uActionCoopMiniGamesMenu4 = 0

; CoopSummoningMenu (OnRelease)
bActionCoopSummoningMenuAnyInputOrder = 0
bActionCoopSummoningMenuConsecTap = 0
bActionCoopSummoningMenuMinHoldTime = 0
bActionCoopSummoningMenu1 = 1
uActionCoopSummoningMenu1 = 6
bActionCoopSummoningMenu2 = 1
uActionCoopSummoningMenu2 = 5
bActionCoopSummoningMenu3 = 0
uActionCoopSummoningMenu3 = 0
bActionCoopSummoningMenu4 = 0
uActionCoopSummoningMenu4 = 0

; CycleAmmo (OnHold)
bActionCycleAmmoAnyInputOrder = 0
bActionCycleAmmoMinHoldTime = 0
bActionCycleAmmo1 = 1
uActionCycleAmmo1 = 9
bActionCycleAmmo2 = 1
uActionCycleAmmo2 = 14
bActionCycleAmmo3 = 0
uActionCycleAmmo3 = 0
bActionCycleAmmo4 = 0
uActionCycleAmmo4 = 0

; CycleSpellCategoryLH (OnHold)
bActionCycleSpellCategoryLHAnyInputOrder = 0
bActionCycleSpellCategoryLHMinHoldTime = 0
bActionCycleSpellCategoryLH1 = 1
uActionCycleSpellCategoryLH1 = 14
bActionCycleSpellCategoryLH2 = 1
uActionCycleSpellCategoryLH2 = 9
bActionCycleSpellCategoryLH3 = 0
uActionCycleSpellCategoryLH3 = 0
bActionCycleSpellCategoryLH4 = 0
uActionCycleSpellCategoryLH4 = 0

; CycleSpellCategoryRH (OnHold)
bActionCycleSpellCategoryRHAnyInputOrder = 0
bActionCycleSpellCategoryRHMinHoldTime = 0
bActionCycleSpellCategoryRH1 = 1
uActionCycleSpellCategoryRH1 = 14
bActionCycleSpellCategoryRH2 = 1
uActionCycleSpellCategoryRH2 = 10
bActionCycleSpellCategoryRH3 = 0
uActionCycleSpellCategoryRH3 = 0
bActionCycleSpellCategoryRH4 = 0
uActionCycleSpellCategoryRH4 = 0

; CycleSpellLH (OnHold)
bActionCycleSpellLHAnyInputOrder = 0
bActionCycleSpellLHMinHoldTime = 0
bActionCycleSpellLH1 = 1
uActionCycleSpellLH1 = 9
bActionCycleSpellLH2 = 1
uActionCycleSpellLH2 = 13
bActionCycleSpellLH3 = 0
uActionCycleSpellLH3 = 0
bActionCycleSpellLH4 = 0
uActionCycleSpellLH4 = 0

; CycleSpellRH (OnHold)
bActionCycleSpellRHAnyInputOrder = 0
bActionCycleSpellRHMinHoldTime = 0
bActionCycleSpellRH1 = 1
uActionCycleSpellRH1 = 10
bActionCycleSpellRH2 = 1
uActionCycleSpellRH2 = 13
bActionCycleSpellRH3 = 0
uActionCycleSpellRH3 = 0
bActionCycleSpellRH4 = 0
uActionCycleSpellRH4 = 0

; CycleVoiceSlotMagic (OnHold)
bActionCycleVoiceSlotMagicAnyInputOrder = 0
bActionCycleVoiceSlotMagicMinHoldTime = 0
bActionCycleVoiceSlotMagic1 = 1
uActionCycleVoiceSlotMagic1 = 10
bActionCycleVoiceSlotMagic2 = 1
uActionCycleVoiceSlotMagic2 = 14
bActionCycleVoiceSlotMagic3 = 0
uActionCycleVoiceSlotMagic3 = 0
bActionCycleVoiceSlotMagic4 = 0
uActionCycleVoiceSlotMagic4 = 0

; CycleWeaponCategoryLH (OnHold)
bActionCycleWeaponCategoryLHAnyInputOrder = 0
bActionCycleWeaponCategoryLHMinHoldTime = 0
bActionCycleWeaponCategoryLH1 = 1
uActionCycleWeaponCategoryLH1 = 14
bActionCycleWeaponCategoryLH2 = 1
uActionCycleWeaponCategoryLH2 = 15
bActionCycleWeaponCategoryLH3 = 0
uActionCycleWeaponCategoryLH3 = 0
bActionCycleWeaponCategoryLH4 = 0
uActionCycleWeaponCategoryLH4 = 0

; CycleWeaponCategoryRH (OnHold)
bActionCycleWeaponCategoryRHAnyInputOrder = 0
bActionCycleWeaponCategoryRHMinHoldTime = 0
bActionCycleWeaponCategoryRH1 = 1
uActionCycleWeaponCategoryRH1 = 14
bActionCycleWeaponCategoryRH2 = 1
uActionCycleWeaponCategoryRH2 = 16
bActionCycleWeaponCategoryRH3 = 0
uActionCycleWeaponCategoryRH3 = 0
bActionCycleWeaponCategoryRH4 = 0
uActionCycleWeaponCategoryRH4 = 0

; CycleWeaponLH (OnHold)
bActionCycleWeaponLHAnyInputOrder = 0
bActionCycleWeaponLHMinHoldTime = 0
bActionCycleWeaponLH1 = 1
uActionCycleWeaponLH1 = 9
bActionCycleWeaponLH2 = 1
uActionCycleWeaponLH2 = 12
bActionCycleWeaponLH3 = 0
uActionCycleWeaponLH3 = 0
bActionCycleWeaponLH4 = 0
uActionCycleWeaponLH4 = 0

; CycleWeaponRH (OnHold)
bActionCycleWeaponRHAnyInputOrder = 0
bActionCycleWeaponRHMinHoldTime = 0
bActionCycleWeaponRH1 = 1
uActionCycleWeaponRH1 = 10
bActionCycleWeaponRH2 = 1
uActionCycleWeaponRH2 = 12
bActionCycleWeaponRH3 = 0
uActionCycleWeaponRH3 = 0
bActionCycleWeaponRH4 = 0
uActionCycleWeaponRH4 = 0

; DebugRagdollPlayer (OnRelease)
bActionDebugRagdollPlayerAnyInputOrder = 0
bActionDebugRagdollPlayerConsecTap = 0
bActionDebugRagdollPlayerMinHoldTime = 0
bActionDebugRagdollPlayer1 = 1
uActionDebugRagdollPlayer1 = 9
bActionDebugRagdollPlayer2 = 1
uActionDebugRagdollPlayer2 = 4
bActionDebugRagdollPlayer3 = 0
uActionDebugRagdollPlayer3 = 0
bActionDebugRagdollPlayer4 = 0
uActionDebugRagdollPlayer4 = 0

; DebugReEquipHandForms (OnRelease)
bActionDebugReEquipHandFormsAnyInputOrder = 0
bActionDebugReEquipHandFormsConsecTap = 0
bActionDebugReEquipHandFormsMinHoldTime = 0
bActionDebugReEquipHandForms1 = 1
uActionDebugReEquipHandForms1 = 9
bActionDebugReEquipHandForms2 = 1
uActionDebugReEquipHandForms2 = 3
bActionDebugReEquipHandForms3 = 0
uActionDebugReEquipHandForms3 = 0
bActionDebugReEquipHandForms4 = 0
uActionDebugReEquipHandForms4 = 0

; DebugRefreshPlayerManagers (OnRelease)
bActionDebugRefreshPlayerManagersAnyInputOrder = 0
bActionDebugRefreshPlayerManagersConsecTap = 0
bActionDebugRefreshPlayerManagersMinHoldTime = 0
bActionDebugRefreshPlayerManagers1 = 1
uActionDebugRefreshPlayerManagers1 = 9
bActionDebugRefreshPlayerManagers2 = 1
uActionDebugRefreshPlayerManagers2 = 2
bActionDebugRefreshPlayerManagers3 = 0
uActionDebugRefreshPlayerManagers3 = 0
bActionDebugRefreshPlayerManagers4 = 0
uActionDebugRefreshPlayerManagers4 = 0

; DebugResetPlayer (OnRelease)
bActionDebugResetPlayerAnyInputOrder = 0
bActionDebugResetPlayerConsecTap = 0
bActionDebugResetPlayerMinHoldTime = 0
bActionDebugResetPlayer1 = 1
uActionDebugResetPlayer1 = 9
bActionDebugResetPlayer2 = 1
uActionDebugResetPlayer2 = 1
bActionDebugResetPlayer3 = 0
uActionDebugResetPlayer3 = 0
bActionDebugResetPlayer4 = 0
uActionDebugResetPlayer4 = 0

; DisableCoopCam (OnRelease)
bActionDisableCoopCamAnyInputOrder = 1
bActionDisableCoopCamConsecTap = 0
bActionDisableCoopCamMinHoldTime = 0
bActionDisableCoopCam1 = 1
uActionDisableCoopCam1 = 7
bActionDisableCoopCam2 = 1
uActionDisableCoopCam2 = 8
bActionDisableCoopCam3 = 0
uActionDisableCoopCam3 = 0
bActionDisableCoopCam4 = 0
uActionDisableCoopCam4 = 0

; Dismount (OnRelease)
bActionDismountAnyInputOrder = 0
bActionDismountConsecTap = 0
bActionDismountMinHoldTime = 0
bActionDismount1 = 1
uActionDismount1 = 79
bActionDismount2 = 0
uActionDismount2 = 0
bActionDismount3 = 0
uActionDismount3 = 0
bActionDismount4 = 0
uActionDismount4 = 0

; Dodge (OnRelease)
bActionDodgeAnyInputOrder = 0
bActionDodgeConsecTap = 0
bActionDodgeMinHoldTime = 0
bActionDodge1 = 1
uActionDodge1 = 81
bActionDodge2 = 0
uActionDodge2 = 0
bActionDodge3 = 0
uActionDodge3 = 0
bActionDodge4 = 0
uActionDodge4 = 0

; FaceTarget (OnRelease)
bActionFaceTargetAnyInputOrder = 0
bActionFaceTargetConsecTap = 0
bActionFaceTargetMinHoldTime = 0
bActionFaceTarget1 = 1
uActionFaceTarget1 = 9
bActionFaceTarget2 = 0
uActionFaceTarget2 = 0
bActionFaceTarget3 = 0
uActionFaceTarget3 = 0
bActionFaceTarget4 = 0
uActionFaceTarget4 = 0

; Favorites (OnRelease)
bActionFavoritesAnyInputOrder = 0
bActionFavoritesConsecTap = 0
bActionFavoritesMinHoldTime = 0
bActionFavorites1 = 1
uActionFavorites1 = 6
bActionFavorites2 = 0
uActionFavorites2 = 0
bActionFavorites3 = 0
uActionFavorites3 = 0
bActionFavorites4 = 0
uActionFavorites4 = 0

; GrabObject (OnHold)
bActionGrabObjectAnyInputOrder = 0
bActionGrabObjectMinHoldTime = 0
bActionGrabObject1 = 1
uActionGrabObject1 = 53
bActionGrabObject2 = 1
uActionGrabObject2 = 19
bActionGrabObject3 = 0
uActionGrabObject3 = 0
bActionGrabObject4 = 0
uActionGrabObject4 = 0

; GrabRotateYZ (NoAction)
bActionGrabRotateYZAnyInputOrder = 1
bActionGrabRotateYZMinHoldTime = 0
bActionGrabRotateYZ1 = 1
uActionGrabRotateYZ1 = 53
bActionGrabRotateYZ2 = 1
uActionGrabRotateYZ2 = 8
bActionGrabRotateYZ3 = 1
uActionGrabRotateYZ3 = 18
bActionGrabRotateYZ4 = 0
uActionGrabRotateYZ4 = 0

; HotkeyEquip (OnHold)
bActionHotkeyEquipAnyInputOrder = 1
bActionHotkeyEquipMinHoldTime = 0
bActionHotkeyEquip1 = 1
uActionHotkeyEquip1 = 8
bActionHotkeyEquip2 = 1
uActionHotkeyEquip2 = 18
bActionHotkeyEquip3 = 0
uActionHotkeyEquip3 = 0
bActionHotkeyEquip4 = 0
uActionHotkeyEquip4 = 0

; Inventory (OnRelease)
bActionInventoryAnyInputOrder = 0
bActionInventoryConsecTap = 0
bActionInventoryMinHoldTime = 0
bActionInventory1 = 1
uActionInventory1 = 4
bActionInventory2 = 0
uActionInventory2 = 0
bActionInventory3 = 0
uActionInventory3 = 0
bActionInventory4 = 0
uActionInventory4 = 0

; Jump (OnRelease)
bActionJumpAnyInputOrder = 0
bActionJumpConsecTap = 0
bActionJumpMinHoldTime = 0
bActionJump1 = 1
uActionJump1 = 14
bActionJump2 = 0
uActionJump2 = 0
bActionJump3 = 0
uActionJump3 = 0
bActionJump4 = 0
uActionJump4 = 0

; MagicMenu (OnRelease)
bActionMagicMenuAnyInputOrder = 0
bActionMagicMenuConsecTap = 0
bActionMagicMenuMinHoldTime = 0
bActionMagicMenu1 = 1
uActionMagicMenu1 = 3
bActionMagicMenu2 = 0
uActionMagicMenu2 = 0
bActionMagicMenu3 = 0
uActionMagicMenu3 = 0
bActionMagicMenu4 = 0
uActionMagicMenu4 = 0

; MapMenu (OnRelease)
bActionMapMenuAnyInputOrder = 0
bActionMapMenuConsecTap = 0
bActionMapMenuMinHoldTime = 0
bActionMapMenu1 = 1
uActionMapMenu1 = 2
bActionMapMenu2 = 0
uActionMapMenu2 = 0
bActionMapMenu3 = 0
uActionMapMenu3 = 0
bActionMapMenu4 = 0
uActionMapMenu4 = 0

; MoveCrosshair (NoAction)
bActionMoveCrosshairAnyInputOrder = 0
bActionMoveCrosshairMinHoldTime = 0
bActionMoveCrosshair1 = 1
uActionMoveCrosshair1 = 18
bActionMoveCrosshair2 = 0
uActionMoveCrosshair2 = 0
bActionMoveCrosshair3 = 0
uActionMoveCrosshair3 = 0
bActionMoveCrosshair4 = 0
uActionMoveCrosshair4 = 0

; Pause (OnRelease)
bActionPauseAnyInputOrder = 0
bActionPauseConsecTap = 0
bActionPauseMinHoldTime = 0
bActionPause1 = 1
uActionPause1 = 5
bActionPause2 = 0
uActionPause2 = 0
bActionPause3 = 0
uActionPause3 = 0
bActionPause4 = 0
uActionPause4 = 0

; PowerAttackDual (OnRelease)
bActionPowerAttackDualAnyInputOrder = 1
bActionPowerAttackDualConsecTap = 0
bActionPowerAttackDualMinHoldTime = 0
bActionPowerAttackDual1 = 1
uActionPowerAttackDual1 = 10
bActionPowerAttackDual2 = 1
uActionPowerAttackDual2 = 24
bActionPowerAttackDual3 = 1
uActionPowerAttackDual3 = 23
bActionPowerAttackDual4 = 0
uActionPowerAttackDual4 = 0

; PowerAttackLH (OnRelease)
bActionPowerAttackLHAnyInputOrder = 0
bActionPowerAttackLHConsecTap = 0
bActionPowerAttackLHMinHoldTime = 0
bActionPowerAttackLH1 = 1
uActionPowerAttackLH1 = 10
bActionPowerAttackLH2 = 1
uActionPowerAttackLH2 = 23
bActionPowerAttackLH3 = 0
uActionPowerAttackLH3 = 0
bActionPowerAttackLH4 = 0
uActionPowerAttackLH4 = 0

; PowerAttackRH (OnRelease)
bActionPowerAttackRHAnyInputOrder = 0
bActionPowerAttackRHConsecTap = 0
bActionPowerAttackRHMinHoldTime = 0
bActionPowerAttackRH1 = 1
uActionPowerAttackRH1 = 10
bActionPowerAttackRH2 = 1
uActionPowerAttackRH2 = 24
bActionPowerAttackRH3 = 0
uActionPowerAttackRH3 = 0
bActionPowerAttackRH4 = 0
uActionPowerAttackRH4 = 0

; QuickSlotCast (OnHold)
bActionQuickSlotCastAnyInputOrder = 0
bActionQuickSlotCastMinHoldTime = 0
bActionQuickSlotCast1 = 1
uActionQuickSlotCast1 = 9
bActionQuickSlotCast2 = 1
uActionQuickSlotCast2 = 10
bActionQuickSlotCast3 = 1
uActionQuickSlotCast3 = 80
bActionQuickSlotCast4 = 0
uActionQuickSlotCast4 = 0

; QuickSlotItem (OnRelease)
bActionQuickSlotItemAnyInputOrder = 0
bActionQuickSlotItemConsecTap = 0
bActionQuickSlotItemMinHoldTime = 0
bActionQuickSlotItem1 = 1
uActionQuickSlotItem1 = 10
bActionQuickSlotItem2 = 1
uActionQuickSlotItem2 = 9
bActionQuickSlotItem3 = 1
uActionQuickSlotItem3 = 80
bActionQuickSlotItem4 = 0
uActionQuickSlotItem4 = 0

; ResetAim (OnRelease)
bActionResetAimAnyInputOrder = 0
bActionResetAimConsecTap = 0
bActionResetAimMinHoldTime = 0
bActionResetAim1 = 1
uActionResetAim1 = 10
bActionResetAim2 = 0
uActionResetAim2 = 0
bActionResetAim3 = 0
uActionResetAim3 = 0
bActionResetAim4 = 0
uActionResetAim4 = 0

; RotateCam (OnPressAndRelease)
bActionRotateCamAnyInputOrder = 1
bActionRotateCamMinHoldTime = 0
bActionRotateCam1 = 1
uActionRotateCam1 = 10
bActionRotateCam2 = 1
uActionRotateCam2 = 18
bActionRotateCam3 = 0
uActionRotateCam3 = 0
bActionRotateCam4 = 0
uActionRotateCam4 = 0

; RotateLeftForearm (NoAction)
bActionRotateLeftForearmAnyInputOrder = 1
bActionRotateLeftForearmMinHoldTime = 0
bActionRotateLeftForearm1 = 1
uActionRotateLeftForearm1 = 9
bActionRotateLeftForearm2 = 1
uActionRotateLeftForearm2 = 23
bActionRotateLeftForearm3 = 1
uActionRotateLeftForearm3 = 18
bActionRotateLeftForearm4 = 0
uActionRotateLeftForearm4 = 0

; RotateLeftHand (NoAction)
bActionRotateLeftHandAnyInputOrder = 1
bActionRotateLeftHandMinHoldTime = 0
bActionRotateLeftHand1 = 1
uActionRotateLeftHand1 = 9
bActionRotateLeftHand2 = 1
uActionRotateLeftHand2 = 23
bActionRotateLeftHand3 = 1
uActionRotateLeftHand3 = 8
bActionRotateLeftHand4 = 1
uActionRotateLeftHand4 = 18

; RotateLeftShoulder (NoAction)
bActionRotateLeftShoulderAnyInputOrder = 1
bActionRotateLeftShoulderMinHoldTime = 0
bActionRotateLeftShoulder1 = 1
uActionRotateLeftShoulder1 = 23
bActionRotateLeftShoulder2 = 1
uActionRotateLeftShoulder2 = 18
bActionRotateLeftShoulder3 = 0
uActionRotateLeftShoulder3 = 0
bActionRotateLeftShoulder4 = 0
uActionRotateLeftShoulder4 = 0

; RotateRightForearm (NoAction)
bActionRotateRightForearmAnyInputOrder = 1
bActionRotateRightForearmMinHoldTime = 0
bActionRotateRightForearm1 = 1
uActionRotateRightForearm1 = 10
bActionRotateRightForearm2 = 1
uActionRotateRightForearm2 = 24
bActionRotateRightForearm3 = 1
uActionRotateRightForearm3 = 18
bActionRotateRightForearm4 = 0
uActionRotateRightForearm4 = 0

; RotateRightHand (NoAction)
bActionRotateRightHandAnyInputOrder = 1
bActionRotateRightHandMinHoldTime = 0
bActionRotateRightHand1 = 1
uActionRotateRightHand1 = 10
bActionRotateRightHand2 = 1
uActionRotateRightHand2 = 24
bActionRotateRightHand3 = 1
uActionRotateRightHand3 = 8
bActionRotateRightHand4 = 1
uActionRotateRightHand4 = 18

; RotateRightShoulder (NoAction)
bActionRotateRightShoulderAnyInputOrder = 1
bActionRotateRightShoulderMinHoldTime = 0
bActionRotateRightShoulder1 = 1
uActionRotateRightShoulder1 = 24
bActionRotateRightShoulder2 = 1
uActionRotateRightShoulder2 = 18
bActionRotateRightShoulder3 = 0
uActionRotateRightShoulder3 = 0
bActionRotateRightShoulder4 = 0
uActionRotateRightShoulder4 = 0

; Sheathe (OnRelease)
bActionSheatheAnyInputOrder = 0
bActionSheatheConsecTap = 0
bActionSheatheMinHoldTime = 0
bActionSheathe1 = 1
uActionSheathe1 = 8
bActionSheathe2 = 0
uActionSheathe2 = 0
bActionSheathe3 = 0
uActionSheathe3 = 0
bActionSheathe4 = 0
uActionSheathe4 = 0

; Shout (OnHold)
bActionShoutAnyInputOrder = 0
bActionShoutMinHoldTime = 0
bActionShout1 = 1
uActionShout1 = 10
bActionShout2 = 1
uActionShout2 = 11
bActionShout3 = 0
uActionShout3 = 0
bActionShout4 = 0
uActionShout4 = 0

; Sneak (OnRelease)
bActionSneakAnyInputOrder = 0
bActionSneakConsecTap = 0
bActionSneakMinHoldTime = 0
bActionSneak1 = 1
uActionSneak1 = 7
bActionSneak2 = 0
uActionSneak2 = 0
bActionSneak3 = 0
uActionSneak3 = 0
bActionSneak4 = 0
uActionSneak4 = 0

; SpecialAction (OnHold)
bActionSpecialActionAnyInputOrder = 0
bActionSpecialActionMinHoldTime = 0
bActionSpecialAction1 = 1
uActionSpecialAction1 = 13
bActionSpecialAction2 = 0
uActionSpecialAction2 = 0
bActionSpecialAction3 = 0
uActionSpecialAction3 = 0
bActionSpecialAction4 = 0
uActionSpecialAction4 = 0

; Sprint (OnPressAndRelease)
bActionSprintAnyInputOrder = 0
bActionSprintMinHoldTime = 1
bActionSprint1 = 1
uActionSprint1 = 12
bActionSprint2 = 0
uActionSprint2 = 0
bActionSprint3 = 0
uActionSprint3 = 0
bActionSprint4 = 0
uActionSprint4 = 0

; StatsMenu (OnRelease)
bActionStatsMenuAnyInputOrder = 0
bActionStatsMenuConsecTap = 0
bActionStatsMenuMinHoldTime = 0
bActionStatsMenu1 = 1
uActionStatsMenu1 = 1
bActionStatsMenu2 = 0
uActionStatsMenu2 = 0
bActionStatsMenu3 = 0
uActionStatsMenu3 = 0
bActionStatsMenu4 = 0
uActionStatsMenu4 = 0

; TeleportToPlayer (OnRelease)
bActionTeleportToPlayerAnyInputOrder = 0
bActionTeleportToPlayerConsecTap = 0
bActionTeleportToPlayerMinHoldTime = 0
bActionTeleportToPlayer1 = 1
uActionTeleportToPlayer1 = 10
bActionTeleportToPlayer2 = 1
uActionTeleportToPlayer2 = 1
bActionTeleportToPlayer3 = 0
uActionTeleportToPlayer3 = 0
bActionTeleportToPlayer4 = 0
uActionTeleportToPlayer4 = 0

; TradeWithPlayer (OnRelease)
bActionTradeWithPlayerAnyInputOrder = 0
bActionTradeWithPlayerConsecTap = 0
bActionTradeWithPlayerMinHoldTime = 0
bActionTradeWithPlayer1 = 1
uActionTradeWithPlayer1 = 10
bActionTradeWithPlayer2 = 1
uActionTradeWithPlayer2 = 2
bActionTradeWithPlayer3 = 0
uActionTradeWithPlayer3 = 0
bActionTradeWithPlayer4 = 0
uActionTradeWithPlayer4 = 0

; TweenMenu (OnRelease)
bActionTweenMenuAnyInputOrder = 0
bActionTweenMenuConsecTap = 0
bActionTweenMenuMinHoldTime = 0
bActionTweenMenu1 = 1
uActionTweenMenu1 = 10
bActionTweenMenu2 = 1
uActionTweenMenu2 = 5
bActionTweenMenu3 = 0
uActionTweenMenu3 = 0
bActionTweenMenu4 = 0
uActionTweenMenu4 = 0

; WaitMenu (OnRelease)
bActionWaitMenuAnyInputOrder = 0
bActionWaitMenuConsecTap = 0
bActionWaitMenuMinHoldTime = 0
bActionWaitMenu1 = 1
uActionWaitMenu1 = 9
bActionWaitMenu2 = 1
uActionWaitMenu2 = 6
bActionWaitMenu3 = 0
uActionWaitMenu3 = 0
bActionWaitMenu4 = 0
uActionWaitMenu4 = 0

; ZoomCam (OnPressAndRelease)
bActionZoomCamAnyInputOrder = 1
bActionZoomCamMinHoldTime = 0
bActionZoomCam1 = 1
uActionZoomCam1 = 9
bActionZoomCam2 = 1
uActionZoomCam2 = 18
bActionZoomCam3 = 0
uActionZoomCam3 = 0
bActionZoomCam4 = 0
uActionZoomCam4 = 0

[Player4]
; [Stat Modifiers]
; Multipliers applied to a co-op actor's health, magicka, and stamina cost/regen values.
; [0.0, 100.0]
fHealthRegenMult = 1.0
fMagickaCostMult = 1.0
fMagickaRegenMult = 1.0
fStaminaCostMult = 1.0
fStaminaRegenMult = 1.0

; Ratio of health/magicka/stamina regen rate in combat to health/magicka/stamina regen rate out of combat.
; [0.0, 1.0]
fHealthRegenCombatRatio = 0.70
fMagickaRegenCombatRatio = 0.33
fStaminaRegenCombatRatio = 0.35

; [Damage Modifiers]
; Multiplier applied to this player's dealt damage.
; Applies to most sources of damage, especially direct sources such as melee attacks or non-explosive hits.
; [0.0, 100.0]
fDamageDealtMult = 1.0

; Multiplier applied to this player's received damage.
; Applies to most sources of damage, especially direct sources such as melee attacks or non-explosive hits.
; [0.0, 100.0]
fDamageReceivedMult = 1.0

; Flop damage mult. For no reason at all.
; [0.0, 100.0]
fFlopDamageMult = 1.0

; Multiplier to the damage dealt to any NPCs that were knocked down by a slap.
; [0.0, 100.0]
fSlapKnockdownDamageMult = 1.0

; Damage mult for thrown objects.
; [0.0, 100.0]
fThrownObjectDamageMult = 1.0

; [Controller]
; Proportion of full displacement from center to serve as the analog stick deadzone.
; [0.01, 0.99]
fAnalogDeadzoneRatio = 0.25

; Proportion of full trigger activation to serve as the trigger deadzone.
; [0.01, 0.99]
fTriggerDeadzoneRatio = 0.25

; [Progression]
; Skill XP multiplier applied whenever this player receives XP for using a skill.
; [0, 10.0]
fSkillXPMult = 1.0

; [Targeting]
; Can players select other players with their crosshairs?
bCanTargetOtherPlayers = 1

; Crosshair magnetism: crosshair slows down when over a target.
; Use crosshair magnetism for Actors.
bCrosshairMagnetismForActors = 1

; Use crosshair magnetism for Object References (all other selectable objects).
bCrosshairMagnetismForObjRefs = 1

; If enabled, attacking party-friendly actors 
; (followers, player allies, summons, and other players) 
; will do damage as usual and reward XP to the attacking player.
; Otherwise, any damage done is negated and no XP is awarded.
; NOTE: For player 1, if disabled, only the damage dealt to friendly actors is negated.
; No other changes were made to the default friendly fire behavior for player 1.
bFriendlyFire = 0

; When no object is selected by the crosshair and the player is attacking,
; aim correction will automatically target an NPC within the player's field-of-view window.
; If the player is attacking nearby hostile NPCs, aim correction will target an NPC 
; that is hostile to a player or ally. Otherwise, if the player is casting a targeted healing spell, 
; aim correction will target other players and allies.
bUseAimCorrection = 1

; If enabled, screenspace (2D) positions and directions are used to select an aim correction target; 
; otherwise worldspace (3D) positions and directions are used. 
; For screenspace checks, imagine an arrow connecting the player's torso to an NPC's torso on the screen
; and move the left stick along that arrow to select the target. 
; For worldspace checks, the player should move towards the target NPC's world position to select them.
bScreenspaceBasedAimCorrectionCheck = 0

; Angular window (degrees) centered at the player's current left stick/heading angle
; within which any actors will be considered as targets for attack auto-aim adjustment.
; Only used when the player is not targeting an actor with their crosshair.
; [0, 360.0]
fAimCorrectionFOV = 90.0

; Max angular adjustment speed (degrees per second) when adjusting the player's aim pitch.
; [0, 720.0]
fMaxAimPitchAdjustmentRate = 180.000000

; 0: Homing projectiles that follow the crosshair.
; 1: Experimental. Projectiles move to the predicted target intercept position.
; Note for aim prediction: tends to be pretty inaccurate when targets change direction quickly
; or when shooting a lobbed projectile.
uProjectileTrajectoryType = 1

; [UI]
; Animated crosshair (animated rotation and oscillation about center).
bAnimatedCrosshair = 1

; 0: Use generic four-prongs style.
; 1: Use Skyrim-style crosshair.
bSkyrimStyleCrosshair = 1

; Fade inactive crosshair when not targeting an object, not moving the crosshair, and not in 'face target' mode.
bFadeInactiveCrosshair = 1

; Re-center inactive crosshair when not targeting an object, not moving the crosshair, and not in 'face target' mode.
bRecenterInactiveCrosshair = 1

; Show an arrow indicator when adjusting or resetting the player's aim pitch 
; or when moving grabbed objects closer to/farther from the player.
bEnableAimPitchIndicator = 1

; Show the expected trajectory for any charged spells, drawn arrows/bolts, 
; and grabbed objects that are about to be thrown.
bEnablePredictedProjectileTrajectoryCurves = 1

; Thickness of any predicted projectile trajectory curves (pixels).
; [1.0, 10.0]
fPredictedProjectileTrajectoryCurveThickness = 2.0

; Crosshair gap radius (pixels).
; [0, 100.0]
fCrosshairGapRadius = 4.0

; Crosshair length (pixels).
; [0, 100.0]
fCrosshairLength = 12.0

; Crosshair thickness (pixels).
; [0, 25.0]
fCrosshairThickness = 2.0

; Crosshair horizontal movement sensitivities for each player.
; Fraction of max pixels per second (fCrosshairMaxTraversablePixelsPerSec).
; For example, a value of '0.5' means the crosshair will move
; across a distance equal to half the max pixels traversable per second.
; [0, 1.0]
fCrosshairHorizontalSensitivity = 0.5

; Crosshair vertical movement sensitivities for each player.
; Fraction of max pixels per second (fCrosshairMaxTraversablePixelsPerSec).
; For example, a value of '0.5' means the crosshair will move
; across a distance equal to half the max pixels traversable per second.
; [0, 1.0]
fCrosshairVerticalSensitivity = 0.5

; Player indicator side length (pixels).
; [1.0, 100.0]
fPlayerIndicatorLength = 30.0

; Player indicator side thickness (pixels).
; [1.0, 10.0]
fPlayerIndicatorThickness = 5.0

; Overlay and crosshair colors (RRGGBB) in hex.
sOverlayRGBValue = FFFF00

; Inner outline is always drawn.
; Black by default.
sCrosshairInnerOutlineRGB = 000000

; Outer outline is only drawn when the crosshair is highlighting a valid target.
; White by default.
sCrosshairOuterOutlineRGB = FFFFFF

; Alpha ranges from 0 (0x0) to 255 (0xFF)
; and determines the transparency of UI elements.
; [0, 255]
uOverlayAlpha = 255

; [0, 255]
uCrosshairInnerOutlineAlpha = 255

; [0, 255]
uCrosshairOuterOutlineAlpha = 255

; 0: Never show the player indicator.
; 1: Only show when the player is obscured or below a certain pixel height on the screen.
; 2: Show the player indicator at all times.
uPlayerIndicatorVisibilityType = 1

; [Timer Intervals]
; Minimum number of seconds to move across and through a crosshair target at max right stick displacement. 
; Serves as a 'stickiness' factor, meaning increasing the interval keeps the crosshair 
; stuck on the target for longer when moving through it.
; [0.0, 2.0]
fMinSecsCrosshairTargetTraversal = 0.2

; Seconds before fading/re-centering the crosshair when it is not over a target, not in 'Face Target' mode, 
; and not being moved at all by the player.
; [0.5, 10.0]
fSecsBeforeRemovingInactiveCrosshair = 2.0

; Seconds to oscillate an animated crosshair (if enabled) from fully contracted to fully expanded.
; [0.1, 10.0]
fSecsToOscillateCrosshair = 1.5

; Seconds to rotate an animated crosshair (if enabled) from its default '+' orientation to its 'x' ('Face Target') configuration or vice versa.
; [0.1, 5.0]
fSecsToRotateCrosshair = 0.5

; [Binds]
; Activate (OnHold)
bActionActivateAnyInputOrder = 0
bActionActivateMinHoldTime = 0
bActionActivate1 = 1
uActionActivate1 = 11
bActionActivate2 = 0
uActionActivate2 = 0
bActionActivate3 = 0
uActionActivate3 = 0
bActionActivate4 = 0
uActionActivate4 = 0

; ActivateAllOfType (OnRelease)
bActionActivateAllOfTypeAnyInputOrder = 0
bActionActivateAllOfTypeConsecTap = 0
bActionActivateAllOfTypeMinHoldTime = 0
bActionActivateAllOfType1 = 1
uActionActivateAllOfType1 = 19
bActionActivateAllOfType2 = 1
uActionActivateAllOfType2 = 9
bActionActivateAllOfType3 = 0
uActionActivateAllOfType3 = 0
bActionActivateAllOfType4 = 0
uActionActivateAllOfType4 = 0

; ActivateCancel (OnRelease)
bActionActivateCancelAnyInputOrder = 0
bActionActivateCancelConsecTap = 0
bActionActivateCancelMinHoldTime = 0
bActionActivateCancel1 = 1
uActionActivateCancel1 = 19
bActionActivateCancel2 = 1
uActionActivateCancel2 = 10
bActionActivateCancel3 = 0
uActionActivateCancel3 = 0
bActionActivateCancel4 = 0
uActionActivateCancel4 = 0

; AdjustAimPitch (OnPressAndRelease)
bActionAdjustAimPitchAnyInputOrder = 1
bActionAdjustAimPitchMinHoldTime = 0
bActionAdjustAimPitch1 = 1
uActionAdjustAimPitch1 = 9
bActionAdjustAimPitch2 = 1
uActionAdjustAimPitch2 = 10
bActionAdjustAimPitch3 = 1
uActionAdjustAimPitch3 = 18
bActionAdjustAimPitch4 = 0
uActionAdjustAimPitch4 = 0

; AttackLH (OnHold)
bActionAttackLHAnyInputOrder = 0
bActionAttackLHMinHoldTime = 0
bActionAttackLH1 = 1
uActionAttackLH1 = 15
bActionAttackLH2 = 0
uActionAttackLH2 = 0
bActionAttackLH3 = 0
uActionAttackLH3 = 0
bActionAttackLH4 = 0
uActionAttackLH4 = 0

; AttackRH (OnHold)
bActionAttackRHAnyInputOrder = 0
bActionAttackRHMinHoldTime = 0
bActionAttackRH1 = 1
uActionAttackRH1 = 16
bActionAttackRH2 = 0
uActionAttackRH2 = 0
bActionAttackRH3 = 0
uActionAttackRH3 = 0
bActionAttackRH4 = 0
uActionAttackRH4 = 0

; Bash (OnHold)
bActionBashAnyInputOrder = 0
bActionBashMinHoldTime = 0
bActionBash1 = 1
uActionBash1 = 24
bActionBash2 = 0
uActionBash2 = 0
bActionBash3 = 0
uActionBash3 = 0
bActionBash4 = 0
uActionBash4 = 0

; Block (OnPressAndRelease)
bActionBlockAnyInputOrder = 0
bActionBlockMinHoldTime = 0
bActionBlock1 = 1
uActionBlock1 = 23
bActionBlock2 = 0
uActionBlock2 = 0
bActionBlock3 = 0
uActionBlock3 = 0
bActionBlock4 = 0
uActionBlock4 = 0

; CamLockOn (OnRelease)
bActionCamLockOnAnyInputOrder = 0
bActionCamLockOnConsecTap = 0
bActionCamLockOnMinHoldTime = 0
bActionCamLockOn1 = 1
uActionCamLockOn1 = 9
bActionCamLockOn2 = 1
uActionCamLockOn2 = 8
bActionCamLockOn3 = 0
uActionCamLockOn3 = 0
bActionCamLockOn4 = 0
uActionCamLockOn4 = 0

; CamManualPos (OnRelease)
bActionCamManualPosAnyInputOrder = 0
bActionCamManualPosConsecTap = 0
bActionCamManualPosMinHoldTime = 0
bActionCamManualPos1 = 1
uActionCamManualPos1 = 10
bActionCamManualPos2 = 1
uActionCamManualPos2 = 8
bActionCamManualPos3 = 0
uActionCamManualPos3 = 0
bActionCamManualPos4 = 0
uActionCamManualPos4 = 0

; CastLH (OnHold)
bActionCastLHAnyInputOrder = 0
bActionCastLHMinHoldTime = 0
bActionCastLH1 = 1
uActionCastLH1 = 23
bActionCastLH2 = 0
uActionCastLH2 = 0
bActionCastLH3 = 0
uActionCastLH3 = 0
bActionCastLH4 = 0
uActionCastLH4 = 0

; CastRH (OnHold)
bActionCastRHAnyInputOrder = 0
bActionCastRHMinHoldTime = 0
bActionCastRH1 = 1
uActionCastRH1 = 24
bActionCastRH2 = 0
uActionCastRH2 = 0
bActionCastRH3 = 0
uActionCastRH3 = 0
bActionCastRH4 = 0
uActionCastRH4 = 0

; ChangeDialoguePlayer (OnRelease)
bActionChangeDialoguePlayerAnyInputOrder = 0
bActionChangeDialoguePlayerConsecTap = 0
bActionChangeDialoguePlayerMinHoldTime = 0
bActionChangeDialoguePlayer1 = 1
uActionChangeDialoguePlayer1 = 63
bActionChangeDialoguePlayer2 = 0
uActionChangeDialoguePlayer2 = 0
bActionChangeDialoguePlayer3 = 0
uActionChangeDialoguePlayer3 = 0
bActionChangeDialoguePlayer4 = 0
uActionChangeDialoguePlayer4 = 0

; CoopDebugMenu (OnRelease)
bActionCoopDebugMenuAnyInputOrder = 0
bActionCoopDebugMenuConsecTap = 0
bActionCoopDebugMenuMinHoldTime = 0
bActionCoopDebugMenu1 = 1
uActionCoopDebugMenu1 = 5
bActionCoopDebugMenu2 = 1
uActionCoopDebugMenu2 = 6
bActionCoopDebugMenu3 = 0
uActionCoopDebugMenu3 = 0
bActionCoopDebugMenu4 = 0
uActionCoopDebugMenu4 = 0

; CoopIdlesMenu (OnRelease)
bActionCoopIdlesMenuAnyInputOrder = 0
bActionCoopIdlesMenuConsecTap = 0
bActionCoopIdlesMenuMinHoldTime = 0
bActionCoopIdlesMenu1 = 1
uActionCoopIdlesMenu1 = 10
bActionCoopIdlesMenu2 = 1
uActionCoopIdlesMenu2 = 4
bActionCoopIdlesMenu3 = 0
uActionCoopIdlesMenu3 = 0
bActionCoopIdlesMenu4 = 0
uActionCoopIdlesMenu4 = 0

; CoopMiniGamesMenu (OnRelease)
bActionCoopMiniGamesMenuAnyInputOrder = 0
bActionCoopMiniGamesMenuConsecTap = 0
bActionCoopMiniGamesMenuMinHoldTime = 0
bActionCoopMiniGamesMenu1 = 1
uActionCoopMiniGamesMenu1 = 10
bActionCoopMiniGamesMenu2 = 1
uActionCoopMiniGamesMenu2 = 3
bActionCoopMiniGamesMenu3 = 0
uActionCoopMiniGamesMenu3 = 0
bActionCoopMiniGamesMenu4 = 0
uActionCoopMiniGamesMenu4 = 0

; CoopSummoningMenu (OnRelease)
bActionCoopSummoningMenuAnyInputOrder = 0
bActionCoopSummoningMenuConsecTap = 0
bActionCoopSummoningMenuMinHoldTime = 0
bActionCoopSummoningMenu1 = 1
uActionCoopSummoningMenu1 = 6
bActionCoopSummoningMenu2 = 1
uActionCoopSummoningMenu2 = 5
bActionCoopSummoningMenu3 = 0
uActionCoopSummoningMenu3 = 0
bActionCoopSummoningMenu4 = 0
uActionCoopSummoningMenu4 = 0

; CycleAmmo (OnHold)
bActionCycleAmmoAnyInputOrder = 0
bActionCycleAmmoMinHoldTime = 0
bActionCycleAmmo1 = 1
uActionCycleAmmo1 = 9
bActionCycleAmmo2 = 1
uActionCycleAmmo2 = 14
bActionCycleAmmo3 = 0
uActionCycleAmmo3 = 0
bActionCycleAmmo4 = 0
uActionCycleAmmo4 = 0

; CycleSpellCategoryLH (OnHold)
bActionCycleSpellCategoryLHAnyInputOrder = 0
bActionCycleSpellCategoryLHMinHoldTime = 0
bActionCycleSpellCategoryLH1 = 1
uActionCycleSpellCategoryLH1 = 14
bActionCycleSpellCategoryLH2 = 1
uActionCycleSpellCategoryLH2 = 9
bActionCycleSpellCategoryLH3 = 0
uActionCycleSpellCategoryLH3 = 0
bActionCycleSpellCategoryLH4 = 0
uActionCycleSpellCategoryLH4 = 0

; CycleSpellCategoryRH (OnHold)
bActionCycleSpellCategoryRHAnyInputOrder = 0
bActionCycleSpellCategoryRHMinHoldTime = 0
bActionCycleSpellCategoryRH1 = 1
uActionCycleSpellCategoryRH1 = 14
bActionCycleSpellCategoryRH2 = 1
uActionCycleSpellCategoryRH2 = 10
bActionCycleSpellCategoryRH3 = 0
uActionCycleSpellCategoryRH3 = 0
bActionCycleSpellCategoryRH4 = 0
uActionCycleSpellCategoryRH4 = 0

; CycleSpellLH (OnHold)
bActionCycleSpellLHAnyInputOrder = 0
bActionCycleSpellLHMinHoldTime = 0
bActionCycleSpellLH1 = 1
uActionCycleSpellLH1 = 9
bActionCycleSpellLH2 = 1
uActionCycleSpellLH2 = 13
bActionCycleSpellLH3 = 0
uActionCycleSpellLH3 = 0
bActionCycleSpellLH4 = 0
uActionCycleSpellLH4 = 0

; CycleSpellRH (OnHold)
bActionCycleSpellRHAnyInputOrder = 0
bActionCycleSpellRHMinHoldTime = 0
bActionCycleSpellRH1 = 1
uActionCycleSpellRH1 = 10
bActionCycleSpellRH2 = 1
uActionCycleSpellRH2 = 13
bActionCycleSpellRH3 = 0
uActionCycleSpellRH3 = 0
bActionCycleSpellRH4 = 0
uActionCycleSpellRH4 = 0

; CycleVoiceSlotMagic (OnHold)
bActionCycleVoiceSlotMagicAnyInputOrder = 0
bActionCycleVoiceSlotMagicMinHoldTime = 0
bActionCycleVoiceSlotMagic1 = 1
uActionCycleVoiceSlotMagic1 = 10
bActionCycleVoiceSlotMagic2 = 1
uActionCycleVoiceSlotMagic2 = 14
bActionCycleVoiceSlotMagic3 = 0
uActionCycleVoiceSlotMagic3 = 0
bActionCycleVoiceSlotMagic4 = 0
uActionCycleVoiceSlotMagic4 = 0

; CycleWeaponCategoryLH (OnHold)
bActionCycleWeaponCategoryLHAnyInputOrder = 0
bActionCycleWeaponCategoryLHMinHoldTime = 0
bActionCycleWeaponCategoryLH1 = 1
uActionCycleWeaponCategoryLH1 = 14
bActionCycleWeaponCategoryLH2 = 1
uActionCycleWeaponCategoryLH2 = 15
bActionCycleWeaponCategoryLH3 = 0
uActionCycleWeaponCategoryLH3 = 0
bActionCycleWeaponCategoryLH4 = 0
uActionCycleWeaponCategoryLH4 = 0

; CycleWeaponCategoryRH (OnHold)
bActionCycleWeaponCategoryRHAnyInputOrder = 0
bActionCycleWeaponCategoryRHMinHoldTime = 0
bActionCycleWeaponCategoryRH1 = 1
uActionCycleWeaponCategoryRH1 = 14
bActionCycleWeaponCategoryRH2 = 1
uActionCycleWeaponCategoryRH2 = 16
bActionCycleWeaponCategoryRH3 = 0
uActionCycleWeaponCategoryRH3 = 0
bActionCycleWeaponCategoryRH4 = 0
uActionCycleWeaponCategoryRH4 = 0

; CycleWeaponLH (OnHold)
bActionCycleWeaponLHAnyInputOrder = 0
bActionCycleWeaponLHMinHoldTime = 0
bActionCycleWeaponLH1 = 1
uActionCycleWeaponLH1 = 9
bActionCycleWeaponLH2 = 1
uActionCycleWeaponLH2 = 12
bActionCycleWeaponLH3 = 0
uActionCycleWeaponLH3 = 0
bActionCycleWeaponLH4 = 0
uActionCycleWeaponLH4 = 0

; CycleWeaponRH (OnHold)
bActionCycleWeaponRHAnyInputOrder = 0
bActionCycleWeaponRHMinHoldTime = 0
bActionCycleWeaponRH1 = 1
uActionCycleWeaponRH1 = 10
bActionCycleWeaponRH2 = 1
uActionCycleWeaponRH2 = 12
bActionCycleWeaponRH3 = 0
uActionCycleWeaponRH3 = 0
bActionCycleWeaponRH4 = 0
uActionCycleWeaponRH4 = 0

; DebugRagdollPlayer (OnRelease)
bActionDebugRagdollPlayerAnyInputOrder = 0
bActionDebugRagdollPlayerConsecTap = 0
bActionDebugRagdollPlayerMinHoldTime = 0
bActionDebugRagdollPlayer1 = 1
uActionDebugRagdollPlayer1 = 9
bActionDebugRagdollPlayer2 = 1
uActionDebugRagdollPlayer2 = 4
bActionDebugRagdollPlayer3 = 0
uActionDebugRagdollPlayer3 = 0
bActionDebugRagdollPlayer4 = 0
uActionDebugRagdollPlayer4 = 0

; DebugReEquipHandForms (OnRelease)
bActionDebugReEquipHandFormsAnyInputOrder = 0
bActionDebugReEquipHandFormsConsecTap = 0
bActionDebugReEquipHandFormsMinHoldTime = 0
bActionDebugReEquipHandForms1 = 1
uActionDebugReEquipHandForms1 = 9
bActionDebugReEquipHandForms2 = 1
uActionDebugReEquipHandForms2 = 3
bActionDebugReEquipHandForms3 = 0
uActionDebugReEquipHandForms3 = 0
bActionDebugReEquipHandForms4 = 0
uActionDebugReEquipHandForms4 = 0

; DebugRefreshPlayerManagers (OnRelease)
bActionDebugRefreshPlayerManagersAnyInputOrder = 0
bActionDebugRefreshPlayerManagersConsecTap = 0
bActionDebugRefreshPlayerManagersMinHoldTime = 0
bActionDebugRefreshPlayerManagers1 = 1
uActionDebugRefreshPlayerManagers1 = 9
bActionDebugRefreshPlayerManagers2 = 1
uActionDebugRefreshPlayerManagers2 = 2
bActionDebugRefreshPlayerManagers3 = 0
uActionDebugRefreshPlayerManagers3 = 0
bActionDebugRefreshPlayerManagers4 = 0
uActionDebugRefreshPlayerManagers4 = 0

; DebugResetPlayer (OnRelease)
bActionDebugResetPlayerAnyInputOrder = 0
bActionDebugResetPlayerConsecTap = 0
bActionDebugResetPlayerMinHoldTime = 0
bActionDebugResetPlayer1 = 1
uActionDebugResetPlayer1 = 9
bActionDebugResetPlayer2 = 1
uActionDebugResetPlayer2 = 1
bActionDebugResetPlayer3 = 0
uActionDebugResetPlayer3 = 0
bActionDebugResetPlayer4 = 0
uActionDebugResetPlayer4 = 0

; DisableCoopCam (OnRelease)
bActionDisableCoopCamAnyInputOrder = 1
bActionDisableCoopCamConsecTap = 0
bActionDisableCoopCamMinHoldTime = 0
bActionDisableCoopCam1 = 1
uActionDisableCoopCam1 = 7
bActionDisableCoopCam2 = 1
uActionDisableCoopCam2 = 8
bActionDisableCoopCam3 = 0
uActionDisableCoopCam3 = 0
bActionDisableCoopCam4 = 0
uActionDisableCoopCam4 = 0

; Dismount (OnRelease)
bActionDismountAnyInputOrder = 0
bActionDismountConsecTap = 0
bActionDismountMinHoldTime = 0
bActionDismount1 = 1
uActionDismount1 = 79
bActionDismount2 = 0
uActionDismount2 = 0
bActionDismount3 = 0
uActionDismount3 = 0
bActionDismount4 = 0
uActionDismount4 = 0

; Dodge (OnRelease)
bActionDodgeAnyInputOrder = 0
bActionDodgeConsecTap = 0
bActionDodgeMinHoldTime = 0
bActionDodge1 = 1
uActionDodge1 = 81
bActionDodge2 = 0
uActionDodge2 = 0
bActionDodge3 = 0
uActionDodge3 = 0
bActionDodge4 = 0
uActionDodge4 = 0

; FaceTarget (OnRelease)
bActionFaceTargetAnyInputOrder = 0
bActionFaceTargetConsecTap = 0
bActionFaceTargetMinHoldTime = 0
bActionFaceTarget1 = 1
uActionFaceTarget1 = 9
bActionFaceTarget2 = 0
uActionFaceTarget2 = 0
bActionFaceTarget3 = 0
uActionFaceTarget3 = 0
bActionFaceTarget4 = 0
uActionFaceTarget4 = 0

; Favorites (OnRelease)
bActionFavoritesAnyInputOrder = 0
bActionFavoritesConsecTap = 0
bActionFavoritesMinHoldTime = 0
bActionFavorites1 = 1
uActionFavorites1 = 6
bActionFavorites2 = 0
uActionFavorites2 = 0
bActionFavorites3 = 0
uActionFavorites3 = 0
bActionFavorites4 = 0
uActionFavorites4 = 0

; GrabObject (OnHold)
bActionGrabObjectAnyInputOrder = 0
bActionGrabObjectMinHoldTime = 0
bActionGrabObject1 = 1
uActionGrabObject1 = 53
bActionGrabObject2 = 1
uActionGrabObject2 = 19
bActionGrabObject3 = 0
uActionGrabObject3 = 0
bActionGrabObject4 = 0
uActionGrabObject4 = 0

; GrabRotateYZ (NoAction)
bActionGrabRotateYZAnyInputOrder = 1
bActionGrabRotateYZMinHoldTime = 0
bActionGrabRotateYZ1 = 1
uActionGrabRotateYZ1 = 53
bActionGrabRotateYZ2 = 1
uActionGrabRotateYZ2 = 8
bActionGrabRotateYZ3 = 1
uActionGrabRotateYZ3 = 18
bActionGrabRotateYZ4 = 0
uActionGrabRotateYZ4 = 0

; HotkeyEquip (OnHold)
bActionHotkeyEquipAnyInputOrder = 1
bActionHotkeyEquipMinHoldTime = 0
bActionHotkeyEquip1 = 1
uActionHotkeyEquip1 = 8
bActionHotkeyEquip2 = 1
uActionHotkeyEquip2 = 18
bActionHotkeyEquip3 = 0
uActionHotkeyEquip3 = 0
bActionHotkeyEquip4 = 0
uActionHotkeyEquip4 = 0

; Inventory (OnRelease)
bActionInventoryAnyInputOrder = 0
bActionInventoryConsecTap = 0
bActionInventoryMinHoldTime = 0
bActionInventory1 = 1
uActionInventory1 = 4
bActionInventory2 = 0
uActionInventory2 = 0
bActionInventory3 = 0
uActionInventory3 = 0
bActionInventory4 = 0
uActionInventory4 = 0

; Jump (OnRelease)
bActionJumpAnyInputOrder = 0
bActionJumpConsecTap = 0
bActionJumpMinHoldTime = 0
bActionJump1 = 1
uActionJump1 = 14
bActionJump2 = 0
uActionJump2 = 0
bActionJump3 = 0
uActionJump3 = 0
bActionJump4 = 0
uActionJump4 = 0

; MagicMenu (OnRelease)
bActionMagicMenuAnyInputOrder = 0
bActionMagicMenuConsecTap = 0
bActionMagicMenuMinHoldTime = 0
bActionMagicMenu1 = 1
uActionMagicMenu1 = 3
bActionMagicMenu2 = 0
uActionMagicMenu2 = 0
bActionMagicMenu3 = 0
uActionMagicMenu3 = 0
bActionMagicMenu4 = 0
uActionMagicMenu4 = 0

; MapMenu (OnRelease)
bActionMapMenuAnyInputOrder = 0
bActionMapMenuConsecTap = 0
bActionMapMenuMinHoldTime = 0
bActionMapMenu1 = 1
uActionMapMenu1 = 2
bActionMapMenu2 = 0
uActionMapMenu2 = 0
bActionMapMenu3 = 0
uActionMapMenu3 = 0
bActionMapMenu4 = 0
uActionMapMenu4 = 0

; MoveCrosshair (NoAction)
bActionMoveCrosshairAnyInputOrder = 0
bActionMoveCrosshairMinHoldTime = 0
bActionMoveCrosshair1 = 1
uActionMoveCrosshair1 = 18
bActionMoveCrosshair2 = 0
uActionMoveCrosshair2 = 0
bActionMoveCrosshair3 = 0
uActionMoveCrosshair3 = 0
bActionMoveCrosshair4 = 0
uActionMoveCrosshair4 = 0

; Pause (OnRelease)
bActionPauseAnyInputOrder = 0
bActionPauseConsecTap = 0
bActionPauseMinHoldTime = 0
bActionPause1 = 1
uActionPause1 = 5
bActionPause2 = 0
uActionPause2 = 0
bActionPause3 = 0
uActionPause3 = 0
bActionPause4 = 0
uActionPause4 = 0

; PowerAttackDual (OnRelease)
bActionPowerAttackDualAnyInputOrder = 1
bActionPowerAttackDualConsecTap = 0
bActionPowerAttackDualMinHoldTime = 0
bActionPowerAttackDual1 = 1
uActionPowerAttackDual1 = 10
bActionPowerAttackDual2 = 1
uActionPowerAttackDual2 = 24
bActionPowerAttackDual3 = 1
uActionPowerAttackDual3 = 23
bActionPowerAttackDual4 = 0
uActionPowerAttackDual4 = 0

; PowerAttackLH (OnRelease)
bActionPowerAttackLHAnyInputOrder = 0
bActionPowerAttackLHConsecTap = 0
bActionPowerAttackLHMinHoldTime = 0
bActionPowerAttackLH1 = 1
uActionPowerAttackLH1 = 10
bActionPowerAttackLH2 = 1
uActionPowerAttackLH2 = 23
bActionPowerAttackLH3 = 0
uActionPowerAttackLH3 = 0
bActionPowerAttackLH4 = 0
uActionPowerAttackLH4 = 0

; PowerAttackRH (OnRelease)
bActionPowerAttackRHAnyInputOrder = 0
bActionPowerAttackRHConsecTap = 0
bActionPowerAttackRHMinHoldTime = 0
bActionPowerAttackRH1 = 1
uActionPowerAttackRH1 = 10
bActionPowerAttackRH2 = 1
uActionPowerAttackRH2 = 24
bActionPowerAttackRH3 = 0
uActionPowerAttackRH3 = 0
bActionPowerAttackRH4 = 0
uActionPowerAttackRH4 = 0

; QuickSlotCast (OnHold)
bActionQuickSlotCastAnyInputOrder = 0
bActionQuickSlotCastMinHoldTime = 0
bActionQuickSlotCast1 = 1
uActionQuickSlotCast1 = 9
bActionQuickSlotCast2 = 1
uActionQuickSlotCast2 = 10
bActionQuickSlotCast3 = 1
uActionQuickSlotCast3 = 80
bActionQuickSlotCast4 = 0
uActionQuickSlotCast4 = 0

; QuickSlotItem (OnRelease)
bActionQuickSlotItemAnyInputOrder = 0
bActionQuickSlotItemConsecTap = 0
bActionQuickSlotItemMinHoldTime = 0
bActionQuickSlotItem1 = 1
uActionQuickSlotItem1 = 10
bActionQuickSlotItem2 = 1
uActionQuickSlotItem2 = 9
bActionQuickSlotItem3 = 1
uActionQuickSlotItem3 = 80
bActionQuickSlotItem4 = 0
uActionQuickSlotItem4 = 0

; ResetAim (OnRelease)
bActionResetAimAnyInputOrder = 0
bActionResetAimConsecTap = 0
bActionResetAimMinHoldTime = 0
bActionResetAim1 = 1
uActionResetAim1 = 10
bActionResetAim2 = 0
uActionResetAim2 = 0
bActionResetAim3 = 0
uActionResetAim3 = 0
bActionResetAim4 = 0
uActionResetAim4 = 0

; RotateCam (OnPressAndRelease)
bActionRotateCamAnyInputOrder = 1
bActionRotateCamMinHoldTime = 0
bActionRotateCam1 = 1
uActionRotateCam1 = 10
bActionRotateCam2 = 1
uActionRotateCam2 = 18
bActionRotateCam3 = 0
uActionRotateCam3 = 0
bActionRotateCam4 = 0
uActionRotateCam4 = 0

; RotateLeftForearm (NoAction)
bActionRotateLeftForearmAnyInputOrder = 1
bActionRotateLeftForearmMinHoldTime = 0
bActionRotateLeftForearm1 = 1
uActionRotateLeftForearm1 = 9
bActionRotateLeftForearm2 = 1
uActionRotateLeftForearm2 = 23
bActionRotateLeftForearm3 = 1
uActionRotateLeftForearm3 = 18
bActionRotateLeftForearm4 = 0
uActionRotateLeftForearm4 = 0

; RotateLeftHand (NoAction)
bActionRotateLeftHandAnyInputOrder = 1
bActionRotateLeftHandMinHoldTime = 0
bActionRotateLeftHand1 = 1
uActionRotateLeftHand1 = 9
bActionRotateLeftHand2 = 1
uActionRotateLeftHand2 = 23
bActionRotateLeftHand3 = 1
uActionRotateLeftHand3 = 8
bActionRotateLeftHand4 = 1
uActionRotateLeftHand4 = 18

; RotateLeftShoulder (NoAction)
bActionRotateLeftShoulderAnyInputOrder = 1
bActionRotateLeftShoulderMinHoldTime = 0
bActionRotateLeftShoulder1 = 1
uActionRotateLeftShoulder1 = 23
bActionRotateLeftShoulder2 = 1
uActionRotateLeftShoulder2 = 18
bActionRotateLeftShoulder3 = 0
uActionRotateLeftShoulder3 = 0
bActionRotateLeftShoulder4 = 0
uActionRotateLeftShoulder4 = 0

; RotateRightForearm (NoAction)
bActionRotateRightForearmAnyInputOrder = 1
bActionRotateRightForearmMinHoldTime = 0
bActionRotateRightForearm1 = 1
uActionRotateRightForearm1 = 10
bActionRotateRightForearm2 = 1
uActionRotateRightForearm2 = 24
bActionRotateRightForearm3 = 1
uActionRotateRightForearm3 = 18
bActionRotateRightForearm4 = 0
uActionRotateRightForearm4 = 0

; RotateRightHand (NoAction)
bActionRotateRightHandAnyInputOrder = 1
bActionRotateRightHandMinHoldTime = 0
bActionRotateRightHand1 = 1
uActionRotateRightHand1 = 10
bActionRotateRightHand2 = 1
uActionRotateRightHand2 = 24
bActionRotateRightHand3 = 1
uActionRotateRightHand3 = 8
bActionRotateRightHand4 = 1
uActionRotateRightHand4 = 18

; RotateRightShoulder (NoAction)
bActionRotateRightShoulderAnyInputOrder = 1
bActionRotateRightShoulderMinHoldTime = 0
bActionRotateRightShoulder1 = 1
uActionRotateRightShoulder1 = 24
bActionRotateRightShoulder2 = 1
uActionRotateRightShoulder2 = 18
bActionRotateRightShoulder3 = 0
uActionRotateRightShoulder3 = 0
bActionRotateRightShoulder4 = 0
uActionRotateRightShoulder4 = 0

; Sheathe (OnRelease)
bActionSheatheAnyInputOrder = 0
bActionSheatheConsecTap = 0
bActionSheatheMinHoldTime = 0
bActionSheathe1 = 1
uActionSheathe1 = 8
bActionSheathe2 = 0
uActionSheathe2 = 0
bActionSheathe3 = 0
uActionSheathe3 = 0
bActionSheathe4 = 0
uActionSheathe4 = 0

; Shout (OnHold)
bActionShoutAnyInputOrder = 0
bActionShoutMinHoldTime = 0
bActionShout1 = 1
uActionShout1 = 10
bActionShout2 = 1
uActionShout2 = 11
bActionShout3 = 0
uActionShout3 = 0
bActionShout4 = 0
uActionShout4 = 0

; Sneak (OnRelease)
bActionSneakAnyInputOrder = 0
bActionSneakConsecTap = 0
bActionSneakMinHoldTime = 0
bActionSneak1 = 1
uActionSneak1 = 7
bActionSneak2 = 0
uActionSneak2 = 0
bActionSneak3 = 0
uActionSneak3 = 0
bActionSneak4 = 0
uActionSneak4 = 0

; SpecialAction (OnHold)
bActionSpecialActionAnyInputOrder = 0
bActionSpecialActionMinHoldTime = 0
bActionSpecialAction1 = 1
uActionSpecialAction1 = 13
bActionSpecialAction2 = 0
uActionSpecialAction2 = 0
bActionSpecialAction3 = 0
uActionSpecialAction3 = 0
bActionSpecialAction4 = 0
uActionSpecialAction4 = 0

; Sprint (OnPressAndRelease)
bActionSprintAnyInputOrder = 0
bActionSprintMinHoldTime = 1
bActionSprint1 = 1
uActionSprint1 = 12
bActionSprint2 = 0
uActionSprint2 = 0
bActionSprint3 = 0
uActionSprint3 = 0
bActionSprint4 = 0
uActionSprint4 = 0

; StatsMenu (OnRelease)
bActionStatsMenuAnyInputOrder = 0
bActionStatsMenuConsecTap = 0
bActionStatsMenuMinHoldTime = 0
bActionStatsMenu1 = 1
uActionStatsMenu1 = 1
bActionStatsMenu2 = 0
uActionStatsMenu2 = 0
bActionStatsMenu3 = 0
uActionStatsMenu3 = 0
bActionStatsMenu4 = 0
uActionStatsMenu4 = 0

; TeleportToPlayer (OnRelease)
bActionTeleportToPlayerAnyInputOrder = 0
bActionTeleportToPlayerConsecTap = 0
bActionTeleportToPlayerMinHoldTime = 0
bActionTeleportToPlayer1 = 1
uActionTeleportToPlayer1 = 10
bActionTeleportToPlayer2 = 1
uActionTeleportToPlayer2 = 1
bActionTeleportToPlayer3 = 0
uActionTeleportToPlayer3 = 0
bActionTeleportToPlayer4 = 0
uActionTeleportToPlayer4 = 0

; TradeWithPlayer (OnRelease)
bActionTradeWithPlayerAnyInputOrder = 0
bActionTradeWithPlayerConsecTap = 0
bActionTradeWithPlayerMinHoldTime = 0
bActionTradeWithPlayer1 = 1
uActionTradeWithPlayer1 = 10
bActionTradeWithPlayer2 = 1
uActionTradeWithPlayer2 = 2
bActionTradeWithPlayer3 = 0
uActionTradeWithPlayer3 = 0
bActionTradeWithPlayer4 = 0
uActionTradeWithPlayer4 = 0

; TweenMenu (OnRelease)
bActionTweenMenuAnyInputOrder = 0
bActionTweenMenuConsecTap = 0
bActionTweenMenuMinHoldTime = 0
bActionTweenMenu1 = 1
uActionTweenMenu1 = 10
bActionTweenMenu2 = 1
uActionTweenMenu2 = 5
bActionTweenMenu3 = 0
uActionTweenMenu3 = 0
bActionTweenMenu4 = 0
uActionTweenMenu4 = 0

; WaitMenu (OnRelease)
bActionWaitMenuAnyInputOrder = 0
bActionWaitMenuConsecTap = 0
bActionWaitMenuMinHoldTime = 0
bActionWaitMenu1 = 1
uActionWaitMenu1 = 9
bActionWaitMenu2 = 1
uActionWaitMenu2 = 6
bActionWaitMenu3 = 0
uActionWaitMenu3 = 0
bActionWaitMenu4 = 0
uActionWaitMenu4 = 0

; ZoomCam (OnPressAndRelease)
bActionZoomCamAnyInputOrder = 1
bActionZoomCamMinHoldTime = 0
bActionZoomCam1 = 1
uActionZoomCam1 = 9
bActionZoomCam2 = 1
uActionZoomCam2 = 18
bActionZoomCam3 = 0
uActionZoomCam3 = 0
bActionZoomCam4 = 0
uActionZoomCam4 = 0